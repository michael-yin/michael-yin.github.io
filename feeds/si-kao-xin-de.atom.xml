<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Michaelyin's Blog</title><link href="http://blog.michaelyin.info/" rel="alternate"></link><link href="http://blog.michaelyin.info/feeds/si-kao-xin-de.atom.xml" rel="self"></link><id>http://blog.michaelyin.info/</id><updated>2013-07-07T20:16:00+08:00</updated><entry><title>Floating Point学习笔记</title><link href="http://blog.michaelyin.info/2013/07/07/floating-point/" rel="alternate"></link><updated>2013-07-07T20:16:00+08:00</updated><author><name>Michaelyin</name></author><id>tag:blog.michaelyin.info,2013-07-07:2013/07/07/floating-point/</id><summary type="html">&lt;p&gt;写代码的时候发现对Float的原理和使用方式没有一个系统的理解，找了资料学习后将知识点在这里进行整理&lt;/p&gt;
&lt;h3&gt;Float存储原理：&lt;/h3&gt;
&lt;p&gt;提到Float的存储方式首先必须提一下IEEE
754这个标准，该标准的出现主要解决了不同计算机之间浮点数表示方式和计算方式无法兼容的问题，现在的计算机内的浮点数的存储方式都是支持这个标准的。&lt;/p&gt;
&lt;p&gt;一个浮点数主要由三部分组成：&lt;mathjax&gt;$$V = (-1)\^{s}\\times M\\times 2\^{E}$$&lt;/mathjax&gt;&lt;/p&gt;
&lt;p&gt;s表示浮点数的正负&lt;/p&gt;
&lt;p&gt;M表示小数部分&lt;/p&gt;
&lt;p&gt;E是2的指数，用来表示2的乘方&lt;/p&gt;
&lt;p&gt;如果将这三部分对应到存储的bit位上去，那么s对应一个bit位，用来表示浮点数的正负，k个bit位用来表示表示2的乘方，这k个bit位统一用exp来表示，n个bit位用来表示小数部分，统一用fra来表示&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.michaelyin.info/images/2013/07/image.png"&gt;&lt;img alt="image" src="http://blog.michaelyin.info/images/2013/07/image_thumb.png" title="image" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在已经知道浮点数的存储位一共有三部分组成，而浮点数本身也被分成了三种类型，三种不同类型的存储方式都有其自身的特点&lt;/p&gt;
&lt;p&gt;1：Normalized Values&lt;/p&gt;
&lt;p&gt;这是最普通的情况，当exp部分的bit位不全为0和不全为1的时候，在这种情况下，exp部分的值E
= e-Bias，这里e是exp部分的无符号整形值，&lt;mathjax&gt;$$Bias = 2\^{k-1}-1$$&lt;/mathjax&gt;&lt;/p&gt;
&lt;p&gt;frac表示小数部分的值，如果bit位的小数的值为f，frac部分的实际值M = f +1&lt;/p&gt;
&lt;p&gt;2：Denormalized Values&lt;/p&gt;
&lt;p&gt;当exp部分全为0的时候，这时候的浮点数就是Denormalized Values，exp对应的值E
= 1- Bias，Bias的值和上面一样的定义&lt;/p&gt;
&lt;p&gt;frac部分的实际值M = f(和前一种有区别，至于为什么后面会讲到)&lt;/p&gt;
&lt;p&gt;Denormalized Values一个很重要的作用就是用来表示非常接近0的值&lt;/p&gt;
&lt;p&gt;3：Special Values&lt;/p&gt;
&lt;p&gt;当exp全部为0，frac全部为0的时候，根据s的值分别表示正无穷和负无穷大，如果frac部位0，frac为0，则表示NaN(Not
a Number)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.michaelyin.info/images/2013/07/image1.png"&gt;&lt;img alt="image" src="http://blog.michaelyin.info/images/2013/07/image_thumb1.png" title="image" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;范例：&lt;/p&gt;
&lt;p&gt;假设现在有一个8bit的浮点数，其中1位表示正负，4位表示乘方，3位表示小数部分，那么Bias
= 7&lt;/p&gt;
&lt;p&gt;当exp为0时，E = 1 – Bias = –6&lt;/p&gt;
&lt;p&gt;当exp不为0时，E = e – Bias&lt;/p&gt;
&lt;p&gt;需要注意的是Largest denormalized 这个地方，是 Denormalized 和Normalized
的交界处，可以发现Denormalized
关于E的定义使得两种不同类型的浮点数很平滑的过渡，没有因为是两种类型中间产生一段较大的区域没有覆盖到&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.michaelyin.info/images/2013/07/image2.png"&gt;&lt;img alt="image" src="http://blog.michaelyin.info/images/2013/07/image_thumb2.png" title="image" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;知道了Float的存储方式后，在计算机内表示实际的实数是需要进行舍入的，即用计算机内能表示的最接近的数的二进制存储方式来表示实际的数，这样一来精度产生的误差肯定是客观存在的了。两个数学意义上不相等的数，在计算机内却有可能是一样的。&lt;/p&gt;
&lt;h3&gt;Python中的float：&lt;/h3&gt;
&lt;p&gt;Python的官方doc里面说Python的float使用C的double实现，那么浮点数的存储方式也是符合IEEE
754的。&lt;/p&gt;
&lt;p&gt;Infinite(即无穷大或无穷小)在Py里表示为inf，NaN，表示为nan&lt;/p&gt;
&lt;p&gt;比如 x = 1e200 ; y = x*x&lt;/p&gt;
&lt;p&gt;y即为inf&lt;/p&gt;
&lt;p&gt;z = y ; z/= y&lt;/p&gt;
&lt;p&gt;由于y已经是无穷大，除法是没有意义的，所以z = nan&lt;/p&gt;
&lt;p&gt;sys.float_info包含Py关于浮点数的一些数值，比如所支持的最大值最小值等&lt;/p&gt;
&lt;h3&gt;编程中关于浮点数需要注意的几点：&lt;/h3&gt;
&lt;p&gt;1: 第一点在很多编程书中都有讲到,那就是浮点数的比较不能用if(a ==
b)这样的方式，因为浮点数都是有精度缺失的，两个数学意义上相等的浮点数在计算机里面可能会有微小的差别，所以只要相距在一定的范围内，都可以认为是相等的，这样写比较合理&lt;/p&gt;
&lt;p&gt;[code lang="py"]&lt;br /&gt;
if(abs(a-b) &amp;lt;= tolerance): do something&lt;br /&gt;
[/code]&lt;/p&gt;
&lt;p&gt;2:在浮点数的四种运算中，减法是相对来说问题比较大的一种(注：正负数相加本质也是作减法)，它产生精度丢失的问题比其他三种都大，而且越相近的两个浮点数相减，精度丢失越大，特殊情况，如果两个相隔很近的浮点数数学意义上不同但是计算机里的存储比特位一样，那么减法会导致精度全部丢失。&lt;/p&gt;
&lt;h6&gt;Related Posts:&lt;/h6&gt;
&lt;p&gt;&lt;a href="http://www.codeproject.com/Articles/29637/Five-Tips-for-Floating-Point-Programming"&gt;Five Tips for Floating Point
Programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.johndcook.com/blog/2009/07/21/ieee-arithmetic-python/"&gt;IEEE floating point arithmetic in
Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html"&gt;What Every Computer Scientist Should Know About
Floating&lt;/a&gt;&lt;/p&gt;</summary><category term="float"></category></entry><entry><title>数组分割的一些错误解法</title><link href="http://blog.michaelyin.info/2013/06/30/split-array-2/" rel="alternate"></link><updated>2013-06-30T18:01:00+08:00</updated><author><name>Michaelyin</name></author><id>tag:blog.michaelyin.info,2013-06-30:2013/06/30/split-array-2/</id><summary type="html">&lt;p&gt;问题：有一个没有排序，元素个数为2N的正整数数组。要求把它分割为元素个数为N的两个数组，并使两个子数组的和最接近。&lt;/p&gt;
&lt;p&gt;这个问题的正确解法&lt;a href="http://blog.michaelyin.info/2013/06/30/%E6%95%B0%E7%BB%84%E5%88%86%E5%89%B2/"&gt;前面一篇博文&lt;/a&gt;已经有写，这里主要是把错误的解法和原因进行一下分析。&lt;/p&gt;
&lt;h6&gt;天平法：&lt;/h6&gt;
&lt;p&gt;这种思路主要就是将2N数组进行排序，从大到小，然后从大到小进行排放，类似将砝码从大到小放到天平上，比如这篇博文&lt;a href="http://sxnuwhui.blog.163.com/blog/static/13706837320126611925456/"&gt;猛击这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点评：最后要的是两边差值最接近，和砝码本身的大小并无直接联系，这种解法很容易找到反例：&lt;/p&gt;
&lt;p&gt;200 190 180 170 160 10&lt;/p&gt;
&lt;p&gt;200 180 160 并不是最优解&lt;/p&gt;
&lt;h6&gt;差值法：&lt;/h6&gt;
&lt;p&gt;前面天平法的缺陷也给了我一点启示，如果是两个一组一起放到天平上的话，启示应该按照两个砝码的差值来进行拜访，排序不应该针对单个砝码，而应该针对砝码的差值&lt;/p&gt;
&lt;p&gt;1：将砝码分成A,B两组&lt;/p&gt;
&lt;p&gt;2：两组的砝码按照位置进行对应，比如A[0]和B[0]进行对应&lt;/p&gt;
&lt;p&gt;3:
对应的A[0]和B[0]之间肯定是有差值的，针对差值的绝对值进行排序，按照从大到小&lt;/p&gt;
&lt;p&gt;4: 针对差值进行“砝码”的摆放，调整A[i] B[i]，保证差值总和的绝对值保持在最小&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;data2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;bubble&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


    &lt;span class="n"&gt;totaldiff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totaldiff&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totaldiff&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;totaldiff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;totaldiff&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;点评：此法初看的确有一些道理，因为不像前一种方法，着重于两数字之间的差值，而且从大到小的排序也解决了摆放的问题，那么，问题在哪里呢？在于分组&lt;/p&gt;
&lt;p&gt;因为分组的时候A[0]和B[0]两者之间就有了一种联系，无论你后面如何进行替换，A[0]和B[0]是不可能同时出现在一个分组中的，这样就造成明明最佳答案是A[0]和B[0]在同一分组里面，但是这个差值法就是得不到最优解&lt;/p&gt;
&lt;p&gt;[80, 59, 57, 34, 97, 76, 9, 76]
是不能得到最优解的，因为最优解的一个分组里面包含97
80，有兴趣的读者可以自行验证&lt;/p&gt;</summary><category term="数组分割"></category></entry><entry><title>更换邮箱那些事儿</title><link href="http://blog.michaelyin.info/2013/05/01/yahoo-email-changing/" rel="alternate"></link><updated>2013-05-01T16:39:00+08:00</updated><author><name>Michaelyin</name></author><id>tag:blog.michaelyin.info,2013-05-01:2013/05/01/yahoo-email-changing/</id><summary type="html">&lt;p&gt;由于中国雅虎的邮箱服务马上就要停止，趁着放假有时间，决定把散落各处的账号进行整理，并将原先和雅虎邮箱绑定的账号绑定到另外的邮箱上去，防止由于邮箱失效造成以后不能找回账号的登录密码。&lt;/p&gt;
&lt;p&gt;更换登录账号绑定的邮箱，方便用户进行数据迁移，这是一个原始用户需求，各个应用对于这个需求有着不同的解决方案。&lt;/p&gt;
&lt;p&gt;想到我的众多可爱师妹们，以及那些众多好图，人人账号是我最先进行修改的&lt;/p&gt;
&lt;p&gt;1: 进入账号设置页面以后，看到有个修改账号功能，点开以后，直接囧了&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.michaelyin.info/images/2013/05/7.png"&gt;&lt;img alt="7" src="http://blog.michaelyin.info/images/2013/05/7_thumb.png" title="7" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2：修改个密码还要申诉，实在有点不太理解。没办法，那就申诉吧，结果接下来，我被深深的囧到了&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.michaelyin.info/images/2013/05/8.jpg"&gt;&lt;img alt="8" src="http://blog.michaelyin.info/images/2013/05/8_thumb.jpg" title="8" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3:
一个简单的功能，竟然被做的如此复杂，这一刻，我认定它的产品经理的头，被门夹了。。。&lt;/p&gt;
&lt;p&gt;接着，是经常用来听歌的虾米网，更改邮箱后，能使用新的邮箱来登录了，不过在个人设置里面，个人邮箱竟然还是显示的是偶的雅虎邮箱地址。。。。汗。。。虾米网有测试人员么？&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.michaelyin.info/images/2013/05/image.png"&gt;&lt;img alt="image" src="http://blog.michaelyin.info/images/2013/05/image_thumb.png" title="image" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;抛开这两个有硬伤的不谈，其他的产品，在修改邮箱上，主要是在一个地方有所不同：&lt;/p&gt;
&lt;p&gt;假设用户原先使用的是邮箱A，现在想迁移到邮箱B，那么在迁移过程中，是否需要首先通过向邮箱A发送邮件进行认证？&lt;/p&gt;
&lt;p&gt;豆瓣，CSDN，当当，是需要强制在邮箱A端通过链接认证的方式走流程的，姑且称为方案一&lt;/p&gt;
&lt;p&gt;Apple, Evernote,
新浪微博，淘宝，支付宝，不需要在邮箱A进行认证，只需要在邮箱B进行认证即可，姑且称为方案二&lt;/p&gt;
&lt;p&gt;众多应用在这点上的分歧其实是很有意思的：&lt;/p&gt;
&lt;p&gt;从使用便捷性来说，由于方案二少了邮箱A的认证过程，所以整个切换过程显得很方便，使用感觉不错，而方案一略显繁琐，当用户对原有邮箱不能正常登陆时，用户会无比纠结，最终找客服进行申诉。&lt;/p&gt;
&lt;p&gt;从安全性上来说，方案一似乎拥有更多的“安全性”。但是，容易被忽略的一点是，假设在黑客拿到账号控制权的情况下，有几个人会去改账号的登陆邮箱。因为修改邮箱会导致账号无法正常登陆，从而导致用户发现账号入侵，并进行申诉重新拿回账号。黑客一般情况是悄悄的进村，打枪滴不要。站在黑客的角度考虑，方案一多余的那一点安全性似乎可用性也就不是很实用了。。。&lt;/p&gt;</summary><category term="账号"></category><category term="邮箱"></category><category term="雅虎"></category></entry><entry><title>老板的那些项目（一）</title><link href="http://blog.michaelyin.info/2013/04/15/the-project/" rel="alternate"></link><updated>2013-04-15T22:49:00+08:00</updated><author><name>Michaelyin</name></author><id>tag:blog.michaelyin.info,2013-04-15:2013/04/15/the-project/</id><summary type="html">&lt;p&gt;决定把上学时候做项目的经验教训做个系列的总结，权当给师弟们贡献个反面教材。&lt;/p&gt;
&lt;p&gt;某日，老板把我叫过去，说接了一个项目，是另外一个老师H介绍过来的，已经提供了源代码，我需要在原有的代码上面进行二次开发，再详细问了一下添加的功能以后，考虑到功能并不复杂，并且以前实现过，所以我二话没说就答应了下来。&lt;/p&gt;
&lt;p&gt;回到实验室，打开源代码，扫了几行代码，就蛋疼了。页面后台直接上SQL语句就算了，控件命名各种数字1到9我就不计较了，最最NB的是，在一个上传附件的页面，它为了在几次PostBack事件里面保存变量值（就是第一次提交后保存的值在第二次提交的时候仍然能读取到），那位先前的童鞋使用了static这个灰常NB的东西。保存确实能保存了，可你摊上事儿了你知道么。&lt;/p&gt;
&lt;p&gt;我深吸了一口气，然后在源代码里面搜索了下，幸亏上传附件的页面不多，这样的话，就把它改了吧。随后，我将上传临时文件的路径写到了页面的Viewstate里面，最后在确定按钮事件里面对其进行统一的处理，解决了static变量在多线程下的问题，由于中间还涉及到前面童鞋的代码写的“太好”，导致中间一个页面由于需要修改流程的时候我改了半天，都没改好，一怒之下将页面代码重写，并且还上了一个轻型的ORM框架。&lt;/p&gt;
&lt;p&gt;几日之后，H老师来我们实验室了解项目进度，老板让我去汇报，我首先将前面那个人的代码的几个问题说了一下，然后特别提到了那个static的问题，并说了我的解决办法，也解释了我为什么花了几天时间来解决。当时，由于我这样做，导致的直接原因就是H老师觉得我的进度太慢。他当时的意思大概是这样的&lt;/p&gt;
&lt;p&gt;1：给我做这个项目的学生，很吃苦，很努力，人家现在在一家世界有名的通信H公司工作（潜台词就是技术过硬？）&lt;/p&gt;
&lt;p&gt;2：这个项目我们现在已经部署了，用了一年多，客户从来没有给我们反馈过问题（没反馈问题就证明人家觉得没问题，人家觉得没问题你改个啥？）&lt;/p&gt;
&lt;p&gt;3：你现在这样改，万一前面的代码改出问题出来了，怎么办？&lt;/p&gt;
&lt;p&gt;4: 你这样改，该做的没做，人家催着要，你自己看着办吧&lt;/p&gt;
&lt;p&gt;当时一听，我立马无语，幼小的心灵感觉受到了极大的摧残，已经不是看环球时报能解决的了。。。&lt;/p&gt;
&lt;p&gt;后来，我加班加点，按时把项目赶完了，由于前面浪费了一些时间，后面改的时间又紧，代码质量觉得也不是很好，很多东西，都是功能通了就没管了。&lt;/p&gt;
&lt;p&gt;工作快一年了，现在回过头来看这件事情，其实也是有点感慨自己的天真，现在的我，看问题和以前变了太多&lt;/p&gt;
&lt;p&gt;做事要明确主次，而不应该太感情用事。别人交代给你的事情，应该选择优先进行完成，也就是说，在这个项目中，扩展功能相对于修改原先的代码是更高优先级的，应该先做，至于别人没提的事情，如果后面有时间，可以再考虑，前提是别人要求你的，你都已经完成了。&lt;/p&gt;
&lt;p&gt;码农总会看到比自己烂的代码，在不影响用户正常使用的情况下，修改不一定是必须的，生活不一定只有代码。（H老师的学生技术过硬那条我呵呵一下就算了，但是用户没反馈问题现在我其实还是表示赞同的）&lt;/p&gt;
&lt;p&gt;说起这条，想起一个故事：
A县和B县两个县长进行防洪工程的建设，B县县长亲自带头监督，工程质量很高，相反，A县县长对此无动于衷。洪水来了,B县固若金汤，A县县长带人昼夜巡视，带领干部和村民吃住在一起，上了电视和报纸，A县的洪水也防住了。后来，当B县县长等着嘉奖令的时候，他却没想到升迁的居然是A县长。。。此刻，B县长顿悟。。。&lt;/p&gt;</summary></entry></feed>