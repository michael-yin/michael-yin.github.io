<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Michaelyin Blog</title><link href="http://blog.michaelyin.info/" rel="alternate"></link><link href="http://blog.michaelyin.info/feeds/wei-fen-lei.atom.xml" rel="self"></link><id>http://blog.michaelyin.info/</id><updated>2013-04-21T23:31:00+08:00</updated><entry><title>由老毛桃想到的</title><link href="http://blog.michaelyin.info/2013/04/21/%e7%94%b1%e8%80%81%e6%af%9b%e6%a1%83%e6%83%b3%e5%88%b0%e7%9a%84/" rel="alternate"></link><updated>2013-04-21T23:31:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2013-04-21:2013/04/21/%e7%94%b1%e8%80%81%e6%af%9b%e6%a1%83%e6%83%b3%e5%88%b0%e7%9a%84/</id><summary type="html">&lt;p&gt;由于装Ubuntu
12.04的时候好像是由于硬盘参数不对导致无法安装，需要在进入系统前使用工具进行修复。不过哥的PC光驱已经不能正常弹出，除非使用大头针，更坑爹的是，上次搬家的时候把系统启动盘弄丢了。。。&lt;/p&gt;
&lt;p&gt;然后再搜索能否通过硬盘的方式加载Windows
PE系统，在百度给的相关搜索里面看到了老毛桃这个软件，进入网站看了一下以后，顿时觉得自己OUT了。。。&lt;/p&gt;
&lt;p&gt;这个软件可以将常用的工具放到U盘中，在BIOS中配置好以后就能够通过U盘自动（&lt;a href="http://www.laomaotao.net/help/2012/1225/1414.html"&gt;猛击这里&lt;/a&gt;），效果和光盘启动是一样的，里面也带了各种常用的工具。对于一般的系统修复，检查来说，已经足够了。除此之外，这个软件提供了对ISO的处理，并能将ISO烧录到U盘中进行启动。省去了刻录光盘的繁琐。（ISO模式暂未亲测）&lt;/p&gt;
&lt;p&gt;也正是因为这个软件，让我觉得以后买PC，光驱或许不是必选项了。。。回想前几年，基本只是在对系统进行引导启动的时候用一用光驱。&lt;/p&gt;
&lt;p&gt;软件背后，让我反思的是我们看问题的思维。以前看起来理所当然的解决方案，放到现在未必就是最合理的，唯一能做的，就是不断地提高自己。&lt;/p&gt;</summary></entry><entry><title>CodeKata-How Big, How Fast?</title><link href="http://blog.michaelyin.info/2013/02/19/codekata-how-big-how-fast/" rel="alternate"></link><updated>2013-02-19T15:40:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2013-02-19:2013/02/19/codekata-how-big-how-fast/</id><summary type="html">&lt;p&gt;这次主要是训练的对于基本空间和时间复杂度的一些估计的思考，作者承诺一周后给出答案，不过到现在为止答案也木有见到，莫非是读者自己去讨论？&lt;/p&gt;
&lt;p&gt;首先是对于十进制很大数字所占bit位的大致估计，只要知道2的十次方是1024，然后1024约等于1000，按照这个对比关系得出结果即可。&lt;/p&gt;
&lt;p&gt;第二个题目是对于存储空间的估计，人名，地址，电话号码啥的大概多少位也不是个定数，自己估计下就行，单个字符的话如果是ASC码的话按照一个字节来处理(编码方式决定这里的字节数)，最后得出大概的结果就行。&lt;/p&gt;
&lt;p&gt;二分法查找的那个题目文章后面有评论给出了解法
，不过我觉得这个解法是有问题的。它把两个之间通过一个比例关系来推导出最后结果所需要的时间，但是仔细分析，二分法的时间复杂度是lg2
n，所以这个方法是有问题的，正确的解法是&lt;/p&gt;
&lt;p&gt;Time = Alg2(n) + B&lt;/p&gt;
&lt;p&gt;时间和数目是这样一种关系，通过前面给出的两组数据恰好能算出A B
的值，这样就能对其他的情况进行类似推导。&lt;/p&gt;
&lt;p&gt;UNIX密码的那个问题应该考虑到密码不一定是有16位，可能只有15
14位等等，这样所有的可能数加起来其实是一个等比数列，将其结果通过等比公式算出来后乘以每次HASH的时间数目然后查看最终结果是否符合要求。&lt;/p&gt;
&lt;p&gt;整体看来题目难度不大，主要目的还是要求程序员对基础知识的掌握，对于基础的排序算法，数据存储以及基本的数学知识是一个优秀程序员必备的素质。&lt;/p&gt;</summary></entry><entry><title>CodeKata-Karate Chop</title><link href="http://blog.michaelyin.info/2013/02/17/codekata-karate-chop/" rel="alternate"></link><updated>2013-02-17T13:47:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2013-02-17:2013/02/17/codekata-karate-chop/</id><summary type="html">&lt;p&gt;这个题目的意思是让读者用尽可能的多的方法实现二分查找算法，并对每种算法的优劣进行比较，题目详情可点击&lt;a href="http://codekata.pragprog.com/2007/01/kata_two_karate.html"&gt;这里&lt;/a&gt;。二分法查找其实并不难，比较常见的就是两种方法，递归和迭代，并且方法中通过边界索引值进行计算，不会对原有的array进行任何修改。&lt;/p&gt;
&lt;p&gt;在Python里面，优雅的切片运算符提供了另外一种方法的思路。在调用时不停的对需要进行比较的列表进行切片操作，不管是递归还是迭代，得到的都是切片后的列表。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;p&gt;[code lang="py"]def slice_binary_search(target, list, count=0):&lt;br /&gt;
length = len(list)&lt;br /&gt;
if(length == 0):&lt;br /&gt;
return -1&lt;br /&gt;
else:&lt;br /&gt;
middle = (length-1)/2&lt;br /&gt;
if(target ==list[middle]):&lt;br /&gt;
return count+ middle&lt;br /&gt;
elif(target &amp;gt; list[middle]):&lt;br /&gt;
return slice_binary_search(target, list[middle+1:length], middle +
1)&lt;br /&gt;
else:&lt;br /&gt;
return slice_binary_search(target, list[0:middle])&lt;/p&gt;
&lt;p&gt;print slice_binary_search(1, [1, 3, 5])&lt;br /&gt;
print slice_binary_search(5, [1, 3, 5])&lt;br /&gt;
print slice_binary_search(2, [1, 3, 5])[/code]&lt;/p&gt;
&lt;p&gt;上面方法，稍作修改可写出迭代方式的算法，仅仅是开阔思维，分片操作会造成额外的开销，生产环境下不建议使用。&lt;/p&gt;</summary></entry><entry><title>前缀，中缀，后缀表达式学习笔记(2)</title><link href="http://blog.michaelyin.info/2012/05/03/%e5%89%8d%e7%bc%80%ef%bc%8c%e4%b8%ad%e7%bc%80%ef%bc%8c%e5%90%8e%e7%bc%80%e8%a1%a8%e8%be%be%e5%bc%8f%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b02/" rel="alternate"></link><updated>2012-05-03T07:51:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2012-05-03:2012/05/03/%e5%89%8d%e7%bc%80%ef%bc%8c%e4%b8%ad%e7%bc%80%ef%bc%8c%e5%90%8e%e7%bc%80%e8%a1%a8%e8%be%be%e5%bc%8f%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b02/</id><summary type="html">&lt;p&gt;前面一章已经将前缀，中缀，后缀表达式的基本概念进行了介绍，同时也介绍了编程中较常用的中缀表达式转换到后缀和前缀表达式的方法。接下来主要针对前缀，中缀和后缀表达式求值来进行相应的讨论。&lt;/p&gt;
&lt;p&gt;在上一篇BLOG中的开始就阐述了中缀表达式求值的过程，中缀表达式求值比较符合人脑的计算方式，而对于计算机来说并不是十分高效，需要多次对表达式进行遍历。下面贴出我自己实现的直接对中缀表达式按人脑计算方式进行求值的代码。&lt;/p&gt;
&lt;p&gt;[code lang="csharp"]&lt;br /&gt;
public static int Evaluate(char[] exp, int firstIndex, int lastIndex)&lt;br /&gt;
{&lt;br /&gt;
//外层如果是括号则去掉&lt;br /&gt;
if (exp[firstIndex] == '(' &amp;amp;&amp;amp; exp[lastIndex] == ')')&lt;br /&gt;
{&lt;br /&gt;
return Evaluate(exp, firstIndex + 1, lastIndex - 1);&lt;br /&gt;
}&lt;br /&gt;
//进行计算&lt;br /&gt;
int position = 0;&lt;br /&gt;
char result = AddOrSub(exp, firstIndex, lastIndex, ref position);&lt;br /&gt;
if (result != '#')&lt;br /&gt;
{&lt;br /&gt;
//计算&lt;br /&gt;
if (result == '+')&lt;br /&gt;
{&lt;br /&gt;
return Evaluate(exp, firstIndex, position - 1) + Evaluate(exp, position
+ 1, lastIndex);&lt;br /&gt;
}&lt;br /&gt;
if (result == '-')&lt;br /&gt;
{&lt;br /&gt;
return Evaluate(exp, firstIndex, position - 1) - Evaluate(exp, position
+ 1, lastIndex);&lt;br /&gt;
}&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;result = MultiplyOrDevide(exp, firstIndex, lastIndex, ref position);&lt;br /&gt;
if (result != '#')&lt;br /&gt;
{&lt;br /&gt;
//计算&lt;br /&gt;
if (result == '*')&lt;br /&gt;
{&lt;br /&gt;
return Evaluate(exp, firstIndex, position - 1) * Evaluate(exp,
position + 1, lastIndex);&lt;br /&gt;
}&lt;br /&gt;
if (result == '/')&lt;br /&gt;
{&lt;br /&gt;
return Evaluate(exp, firstIndex, position - 1) / Evaluate(exp, position
+ 1, lastIndex);&lt;br /&gt;
}&lt;br /&gt;
}&lt;br /&gt;
//生成实际数字值&lt;br /&gt;
if (exp[firstIndex] &gt; '9' || exp[firstIndex] &amp;lt; '0')&lt;br /&gt;
Console.WriteLine("Error");&lt;/p&gt;
&lt;p&gt;return RealNum(exp[firstIndex]);&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;public static char AddOrSub(char[] exp, int firstIndex, int lastIndex,
ref int position)&lt;br /&gt;
{&lt;br /&gt;
System.Collections.Stack objStack = new Stack();&lt;br /&gt;
//找到返回操作符，找不到返回#&lt;br /&gt;
for (int i = firstIndex; i &amp;lt;= lastIndex; i++)&lt;br /&gt;
{&lt;br /&gt;
if (exp[i] == '(')&lt;br /&gt;
{&lt;br /&gt;
objStack.Push('(');&lt;br /&gt;
}&lt;br /&gt;
if (exp[i] == ')')&lt;br /&gt;
{&lt;br /&gt;
objStack.Pop();&lt;br /&gt;
}&lt;br /&gt;
if (exp[i] == '+' &amp;amp;&amp;amp; objStack.Count == 0)&lt;br /&gt;
{&lt;br /&gt;
position = i;&lt;br /&gt;
return '+';&lt;br /&gt;
}&lt;br /&gt;
if (exp[i] == '-' &amp;amp;&amp;amp; objStack.Count == 0)&lt;br /&gt;
{&lt;br /&gt;
position = i;&lt;br /&gt;
return '-';&lt;br /&gt;
}&lt;br /&gt;
}&lt;br /&gt;
//没有找到对应的操作符&lt;br /&gt;
return '#';&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;public static char MultiplyOrDevide(char[] exp, int firstIndex, int
lastIndex, ref int position)&lt;br /&gt;
{&lt;br /&gt;
//找到返回操作符，找不到返回#&lt;br /&gt;
System.Collections.Stack objStack = new Stack();&lt;br /&gt;
//找到返回操作符，找不到返回#&lt;br /&gt;
for (int i = firstIndex; i &amp;lt;= lastIndex; i++)&lt;br /&gt;
{&lt;br /&gt;
if (exp[i] == '(')&lt;br /&gt;
{&lt;br /&gt;
objStack.Push('(');&lt;br /&gt;
}&lt;br /&gt;
if (exp[i] == ')')&lt;br /&gt;
{&lt;br /&gt;
objStack.Pop();&lt;br /&gt;
}&lt;br /&gt;
if (exp[i] == '*' &amp;amp;&amp;amp; objStack.Count == 0)&lt;br /&gt;
{&lt;br /&gt;
position = i;&lt;br /&gt;
return '*';&lt;br /&gt;
}&lt;br /&gt;
if (exp[i] == '/' &amp;amp;&amp;amp; objStack.Count == 0)&lt;br /&gt;
{&lt;br /&gt;
position = i;&lt;br /&gt;
return '/';&lt;br /&gt;
}&lt;br /&gt;
}&lt;br /&gt;
//没有找到对应的操作符&lt;br /&gt;
return '#';&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;public static int RealNum(char num)&lt;br /&gt;
{&lt;br /&gt;
return 0 + (num - '0');&lt;br /&gt;
}&lt;br /&gt;
[/code]&lt;/p&gt;
&lt;p&gt;下面讲解如何对后缀表达式进行求值。建立一个栈，从左至右遍历表达式，如果遇到操作数则压入栈，如果遇到操作符则弹出相应的操作数进行计算，并将计算的结果重新入栈，最后的结果就在栈顶。前缀表达式和后缀类似，在这里就不赘述了。&lt;/p&gt;
&lt;p&gt;可以看出后缀表达式的求值也只需要对后缀表达式进行一次扫描，而前面我们已经知道中缀表达式转换到后缀表达式也是只需要扫描一次的。相对于上面的类似于人脑的计算方式，我们在这里可以考虑将中缀表达式转换为后缀表达式后再对其求值，这样来完成中缀表达式的求值。其实这种方式就是那本经典的清华严蔚敏的《数据结构》一书中对于四则运算的解决的思路。&lt;/p&gt;
&lt;p&gt;下面贴出用C#实现的中缀转后缀并求值的代码，该代码可以用来进行四则运算&lt;/p&gt;
&lt;p&gt;[code lang="csharp"]&lt;br /&gt;
public static void EvaluateExpression()&lt;br /&gt;
{&lt;br /&gt;
System.Collections.Stack stackA = new System.Collections.Stack();&lt;br /&gt;
System.Collections.Stack stackB = new System.Collections.Stack();&lt;br /&gt;
stackA.Push('#');&lt;br /&gt;
char user;&lt;br /&gt;
user = (char)Console.Read();&lt;br /&gt;
while (user != '#' || ((char)stackA.Peek() != '#'))&lt;br /&gt;
{&lt;br /&gt;
//操作符号&lt;br /&gt;
if (In(user))&lt;br /&gt;
{&lt;br /&gt;
//判断优先级&lt;br /&gt;
switch (Precede((char)stackA.Peek(), user))&lt;br /&gt;
{&lt;br /&gt;
case '&gt;':&lt;br /&gt;
//顺序&lt;br /&gt;
char b = (char)stackB.Pop();&lt;br /&gt;
char a = (char)stackB.Pop();&lt;br /&gt;
char op = (char)stackA.Pop();&lt;/p&gt;
&lt;p&gt;stackB.Push(Operate(a, b, op));&lt;/p&gt;
&lt;p&gt;break;&lt;br /&gt;
case '=':&lt;br /&gt;
stackA.Pop();&lt;br /&gt;
user = (char)Console.Read();&lt;br /&gt;
break;&lt;br /&gt;
case '&amp;lt;':&lt;br /&gt;
stackA.Push(user);&lt;br /&gt;
user = (char)Console.Read();&lt;br /&gt;
break;&lt;br /&gt;
}&lt;br /&gt;
}&lt;br /&gt;
else&lt;br /&gt;
{&lt;br /&gt;
if (user &amp;lt; '0' || user &gt; '9')&lt;br /&gt;
{&lt;br /&gt;
Console.WriteLine("Error");&lt;br /&gt;
return;&lt;br /&gt;
}&lt;br /&gt;
else&lt;br /&gt;
{&lt;br /&gt;
stackB.Push(user);&lt;br /&gt;
user = (char)Console.Read();&lt;br /&gt;
}&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;}&lt;br /&gt;
Console.WriteLine((char)stackB.Pop());&lt;br /&gt;
Console.ReadLine();&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;/// &amp;lt;summary&gt;&lt;br /&gt;
/// 如果是操作符号，则返回true&lt;br /&gt;
/// &amp;lt;/summary&gt;&lt;br /&gt;
/// &amp;lt;param name="c"&gt;&amp;lt;/param&gt;&lt;br /&gt;
/// &amp;lt;returns&gt;&amp;lt;/returns&gt;&lt;br /&gt;
public static bool In(char c)&lt;br /&gt;
{&lt;br /&gt;
//该写法值得商榷&lt;br /&gt;
switch (c)&lt;br /&gt;
{&lt;br /&gt;
case '(':&lt;br /&gt;
return true;&lt;br /&gt;
case ')':&lt;br /&gt;
return true;&lt;br /&gt;
case '+':&lt;br /&gt;
return true;&lt;br /&gt;
case '-':&lt;br /&gt;
return true;&lt;br /&gt;
case '*':&lt;br /&gt;
return true;&lt;br /&gt;
case '/':&lt;br /&gt;
return true;&lt;br /&gt;
case '#':&lt;br /&gt;
return true;&lt;br /&gt;
}&lt;br /&gt;
return false;&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;public static char Precede(char t1, char t2)&lt;br /&gt;
{&lt;br /&gt;
char f = '=';&lt;br /&gt;
switch (t2)&lt;br /&gt;
{&lt;br /&gt;
case '+':&lt;br /&gt;
case '-': if (t1 == '(' || t1 == '#')&lt;br /&gt;
f = '&amp;lt;';&lt;br /&gt;
else&lt;br /&gt;
f = '&gt;';&lt;br /&gt;
break;&lt;br /&gt;
case '*':&lt;br /&gt;
case '/': if (t1 == '*' || t1 == '/' || t1 == ')')&lt;br /&gt;
f = '&gt;';&lt;br /&gt;
else&lt;br /&gt;
f = '&amp;lt;';&lt;br /&gt;
break;&lt;br /&gt;
case '(': if (t1 == ')')&lt;br /&gt;
{&lt;br /&gt;
Console.WriteLine("error");&lt;br /&gt;
}&lt;br /&gt;
else&lt;br /&gt;
f = '&amp;lt;';&lt;br /&gt;
break;&lt;br /&gt;
case ')':&lt;br /&gt;
switch (t1)&lt;br /&gt;
{&lt;br /&gt;
case '(': f = '=';&lt;br /&gt;
break;&lt;br /&gt;
case '#':&lt;br /&gt;
break;&lt;br /&gt;
default: f = '&gt;';&lt;br /&gt;
break;&lt;br /&gt;
}&lt;br /&gt;
break;&lt;br /&gt;
case '#': switch (t1)&lt;br /&gt;
{&lt;br /&gt;
case '#': f = '=';&lt;br /&gt;
break;&lt;br /&gt;
case '(':&lt;br /&gt;
break;&lt;br /&gt;
default: f = '&gt;';&lt;br /&gt;
break;&lt;br /&gt;
}&lt;br /&gt;
break;&lt;br /&gt;
}&lt;br /&gt;
return f;&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;public static char Operate(char a, char b, char operate)&lt;br /&gt;
{&lt;br /&gt;
a = Convert.ToChar((int)a - 48);&lt;br /&gt;
b = Convert.ToChar((int)b - 48);&lt;br /&gt;
int c = 0;&lt;br /&gt;
switch (operate)&lt;br /&gt;
{&lt;br /&gt;
case '+': c = a + b + 48;&lt;br /&gt;
break;&lt;br /&gt;
case '-': c = a - b + 48;&lt;br /&gt;
break;&lt;br /&gt;
case '*': c = a * b + 48;&lt;br /&gt;
break;&lt;br /&gt;
case '/': c = a / b + 48;&lt;br /&gt;
break;&lt;br /&gt;
}&lt;br /&gt;
return Convert.ToChar(c);&lt;br /&gt;
}&lt;br /&gt;
#endregion&lt;br /&gt;
[/code]&lt;/p&gt;
&lt;p&gt;在研究一下两种针对中缀表达式求值的方法后我们可以通过思考得到一些结论，首先人脑的计算方式在计算机中并不是最优化的方法，除了递归调用带来的性能损失，对表达式多次遍历也是会带来性能损失。而先转换到后缀表达式后在对其进行求值则避免了上述问题，提高了整体的计算的性能。&lt;/p&gt;
&lt;p&gt;由于中缀表达式在我们看来更为习惯，但是后缀表达式在计算中的优势，所以编译程序常把程序源代码中的中缀表达式转换为后缀表达式再进行运算。当时看到这里的时候也想过为什么编译为什么不采用前缀表达式，后来想了一下前一篇BLOG讲到过前缀的扫描方向是从右至左，所以在程序中处理的话可能相对于后缀表达式不是很方便，所以后缀是最合适的选择。&lt;/p&gt;</summary></entry><entry><title>前缀，中缀，后缀表达式学习笔记(1)</title><link href="http://blog.michaelyin.info/2012/05/02/%e5%89%8d%e7%bc%80%ef%bc%8c%e4%b8%ad%e7%bc%80%ef%bc%8c%e5%90%8e%e7%bc%80%e8%a1%a8%e8%be%be%e5%bc%8f%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b01/" rel="alternate"></link><updated>2012-05-02T08:40:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2012-05-02:2012/05/02/%e5%89%8d%e7%bc%80%ef%bc%8c%e4%b8%ad%e7%bc%80%ef%bc%8c%e5%90%8e%e7%bc%80%e8%a1%a8%e8%be%be%e5%bc%8f%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b01/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;表达式简介&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近看书的时候接触到了后缀表达式，恰好看SICP中间也碰到了类似的问题，就花时间好好将这部分内容进行了整理。&lt;/p&gt;
&lt;p&gt;前缀表达式(Prefix
Notation)是指将运算符写在前面操作数写在后面的不包含括号的表达式，而且为了纪念其发明者波兰数学家Jan
Lukasiewicz所以前缀表达式也叫做“波兰表达式”。比如- 1 + 2 3&lt;/p&gt;
&lt;p&gt;后缀表达式(Postfix
Notation)与之相反，是指运算符写在操作数后面的不含括号的算术表达式，也叫做逆波兰表达式。比如1
2 3 + -&lt;/p&gt;
&lt;p&gt;中缀表达式(Infix
Notation)就是常用的将操作符放在操作数中间的算术表达式。前缀表达式和后缀表达式相对于中缀表达式最大的不同就是去掉了表示运算优先级的括号，比如1-2+3&lt;/p&gt;
&lt;p&gt;现在让我们先回想一下小学数学中关于中缀表达式求值的相关的规则：&lt;/p&gt;
&lt;p&gt;1 有括号的情况下，先计算括号内，再计算括号外&lt;/p&gt;
&lt;p&gt;2 在无括号的情况下，考虑运算的优先级，先乘除，后加减&lt;/p&gt;
&lt;p&gt;3 同样优先级的情况下，从左至右进行计算&lt;/p&gt;
&lt;p&gt;在中缀表达式的情况下求值，既要考虑括号，优先级，还要考虑操作出现的先后顺序。但是，作为计算机，其计算过程就显的比较复杂，对于一个中缀表达式，需要不停地对表达式进行多次遍历，来查找相应的计算的信息。这样从算法复杂度上来说，是不可取的。&lt;/p&gt;
&lt;p&gt;前缀表达式和后缀表达式相对于人们常用的中缀表达式最大的不同就在于表达式中的运算符是按照一定的顺序出现（接下来会具体讲解），所以求值过程中并不需要在表达式中使用括号来指定运算顺序，也不需要在计算过程中其中考虑运算符号的优先级。在采用辅助数据结构的情况下，只需要对表达式进行一次遍历即可计算出结果，大大降低了算法复杂度，也更加符合传统计算机的工作方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表达式的转换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在对前缀中缀和后缀表达式进行了简单的介绍以后，接下来对表达式之间的转换进行一个简单的阐述，在这里首先以中缀表达式转换后缀表达式为例进行较详细的讲解。&lt;/p&gt;
&lt;p&gt;首先介绍一个人工转换的方法，假设有一个中缀表达式a+b*c-(d+e)&lt;/p&gt;
&lt;p&gt;1首先将这个中缀表达式的所有运算加括号((a+(b*c))-(d+e))&lt;/p&gt;
&lt;p&gt;2然后将所有运算符放到括号后面，这样就变成了((a(bc)* )+ (de)+ )-&lt;/p&gt;
&lt;p&gt;3把所有括号去掉abc*+de+-，最后得出的结果就是后缀表达式&lt;/p&gt;
&lt;p&gt;上面这个方法可以在比如做题分析的时候用人脑的时候使用，接下来介绍用程序实现将中缀转换成后缀表达式的思路&lt;/p&gt;
&lt;p&gt;1 建立一个栈，然后从左至右的遍历中缀表达式&lt;/p&gt;
&lt;p&gt;2
如果碰到了操作数，则直接将其输出，如果碰到了操作符，这个时候则需要进行优先级的比较，如果栈为空或者栈顶的操作符的优先级比当前的低，则将当前的操作符Push入栈，如果栈顶操作符比当前的操作符的优先级高或者相同，则POP操作符并输出，直到出现前一种情况为止&lt;/p&gt;
&lt;p&gt;3
需要注意的是对于括号需要另外注意一下，如果是’(’，则直接入栈，如果是)则要找到对应的’(’为止，并且当两者同时出现时则同时删除&lt;/p&gt;
&lt;p&gt;下面模拟程序对a+b*c-(d+e)求中缀表达式，首先对其进行扫描&lt;/p&gt;
&lt;p&gt;输出 a 栈底 栈顶&lt;/p&gt;
&lt;p&gt;输出 a 栈底 + 栈顶&lt;/p&gt;
&lt;p&gt;输出 a b 栈底 + 栈顶&lt;/p&gt;
&lt;p&gt;输出 a b 栈底 + * 栈顶&lt;/p&gt;
&lt;p&gt;输出 a b c 栈底 + * 栈顶&lt;/p&gt;
&lt;p&gt;输出 a b c * 栈底 + 栈顶&lt;/p&gt;
&lt;p&gt;输出 a b c * + 栈底 - 栈顶&lt;/p&gt;
&lt;p&gt;输出 a b c * + 栈底 - ( 栈顶&lt;/p&gt;
&lt;p&gt;输出 a b c * + d 栈底 - ( 栈顶&lt;/p&gt;
&lt;p&gt;输出 a b c * + d 栈底 - ( + 栈顶&lt;/p&gt;
&lt;p&gt;输出 a b c * + d e 栈底 - ( + 栈顶&lt;/p&gt;
&lt;p&gt;输出 a b c * + d e + 栈底 ( 栈顶&lt;/p&gt;
&lt;p&gt;输出 a b c * + d e + - 栈底 栈顶&lt;/p&gt;
&lt;p&gt;上面已经把中缀表达式转换后缀表达式的过程讲解了一下，而中缀表达式转换前缀表达式其实过程和转换后缀表达式及其相似，在这里就不说具体过程了，只是对其中的几个不同之处稍微说明一下：&lt;/p&gt;
&lt;p&gt;1
转换后缀表达式由于符号是要在操作数后面出现，所以操作数入栈，扫描顺序是从左向右，转换前缀表达式的话操作符需要在操作数前面出现，那么扫描顺序就应该是从右向左。&lt;/p&gt;
&lt;p&gt;2 操作符的具体处理方式和转换到后缀表达式略有不同&lt;/p&gt;
&lt;p&gt;3 括号的操作也是’)’直接入栈，’(’则配对’)’后一起出栈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前缀，中缀，后缀表达式与二叉树的表示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三个表达式其实与二叉树是有这很紧密的联系的，a+b*c-(d+e)这个中缀表达式我们将其操作符当做内节点，操作数当做叶子节点，这样的话就能够画出这个中缀表达式所对应的二叉树&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnblogs.com/cnblogs_com/MichaelYin/201205/201205021711401009.png"&gt;&lt;img alt="image" src="http://images.cnblogs.com/cnblogs_com/MichaelYin/201205/201205021711418849.png" title="image" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果我们对这个中缀表达式进行前序和后序遍历，则输出的结果就是其对应的前缀和后缀表达式。&lt;/p&gt;
&lt;p&gt;本篇Blog我所参考的资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://liuaigui.blog.sohu.com/40175057.html"&gt;http://liuaigui.blog.sohu.com/40175057.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://apps.hi.baidu.com/share/detail/19581670"&gt;http://apps.hi.baidu.com/share/detail/19581670&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://apps.hi.baidu.com/share/detail/19581670"&gt;http://apps.hi.baidu.com/share/detail/19581670&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Winform中的Control.Invoke&amp;Control.BeginInvoke</title><link href="http://blog.michaelyin.info/2012/02/22/winform%e4%b8%ad%e7%9a%84control-invokecontrol-begininvoke/" rel="alternate"></link><updated>2012-02-22T13:06:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2012-02-22:2012/02/22/winform%e4%b8%ad%e7%9a%84control-invokecontrol-begininvoke/</id><summary type="html">&lt;p&gt;最近由于毕业论文的原因接触了下Winform，以前对于Control.BeginInvoke和delegate下的同样的方法的区别不是很清楚，这次借着这次机会把这个知识点好好补了一下。&lt;/p&gt;
&lt;p&gt;先来说说Winform中的Control吧，Winform中的控件是运行在UI线程中的，而不是工作线程（可以通过InvokeRequired来进行判断是不是安全的），所以如果我们在工作线程中对其的属性进行修改的话，那么多线程的时候就会产生问题。所以微软是不建议这样操作的&lt;/p&gt;
&lt;p&gt;那么如果我需要控件完成某个事情，我需要怎么做呢？这时候Control.Invoke的作用就体现出来了。这里需要注意的是有两个一个是Invoke,另外一个是BeginInvoke，那么这两者有什么区别呢？&lt;/p&gt;
&lt;p&gt;如果后台工作线程需要对UI这个线程的方法调用进行等待那么就用Invoke,如果不需要等待，，当传入的方法执行完毕后工作线程继续执行的，那么就用BeginInvoke，两者的区别仅仅在于是否阻塞工作线程，&lt;font color="#ff0000"&gt;而传入的方法其实都是在UI线程内执行的&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color="#000000"&gt;而delegate的BeginInvoke其实是新开辟的一个线程，在这个新开辟的线程中执行这个方法&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;[code lang="csharp"]&lt;br /&gt;
private void button1_Click(object sender, EventArgs e)&lt;br /&gt;
{&lt;/p&gt;
&lt;p&gt;Func&amp;lt;string&gt; func = () =&gt; {&lt;br /&gt;
MessageBox.Show(Thread.CurrentThread.ManagedThreadId.ToString());&lt;br /&gt;
return "asdf";&lt;br /&gt;
};&lt;/p&gt;
&lt;p&gt;func.BeginInvoke(null, null);&lt;/p&gt;
&lt;p&gt;}[/code]&lt;/p&gt;
&lt;p&gt;&lt;font color="#000000"&gt;在VS中Debug/Windows/Threads可以查看运行的进程&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color="#000000"&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/yuyijq/archive/2010/01/11/1643802.html"&gt;http://www.cnblogs.com/yuyijq/archive/2010/01/11/1643802.html&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>算法学习之栈</title><link href="http://blog.michaelyin.info/2011/10/10/%e7%ae%97%e6%b3%95%e5%ad%a6%e4%b9%a0%e4%b9%8b%e6%a0%88/" rel="alternate"></link><updated>2011-10-10T12:16:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2011-10-10:2011/10/10/%e7%ae%97%e6%b3%95%e5%ad%a6%e4%b9%a0%e4%b9%8b%e6%a0%88/</id><summary type="html">&lt;p&gt;最近趁着找工作做了很多关于数据结构和算法的题，在这里也将涉及到栈的一些不错的知识点和题目以及代码贴出来，一方面是为了夯实基础，另外一方面方便大家更好的掌握数据结构中的栈&lt;/p&gt;
&lt;p&gt;栈的特性其实一说对数据结构有稍微了解的人都知道，后进先出，但是在解决问题的过程中熟练的使用合适的数据结构我觉得才是对栈真正的理解&lt;/p&gt;
&lt;p&gt;首先来讲一个很经典的问题，就是出栈顺序，题目是这样的，比如现在又1 2 3 4
5五个数字，规定这五个数字入栈的顺序不变，但是中间可以任意的出栈，出栈的数字就当做输出，请写出程序输出所有的出栈的序列&lt;/p&gt;
&lt;p&gt;这个问题可以用很经典的回溯法来解，就是通过递归方法调用，在每一层找出所有可能的操作方式，直到全部输出，另外需要加一句的是在以前我是不知道递归的时候还原现场的，在这个代码里面也是学到了这个知识点，而这个小细节其实是很重要的，当时就是因为这个细节让我在思考递归调用的时候否定了该方法，后来想了许久才重新相通&lt;/p&gt;
&lt;p&gt;下面贴出相关代码&lt;/p&gt;
&lt;p&gt;[code lang="csharp"]&lt;br /&gt;
public static void SearchStack(Stack&amp;lt;int&gt; input, Stack&amp;lt;int&gt; stack,
Stack&amp;lt;int&gt; output)&lt;br /&gt;
{&lt;br /&gt;
if (input.Count == 0 &amp;amp;&amp;amp; stack.Count == 0)&lt;br /&gt;
{&lt;br /&gt;
//输出结果&lt;br /&gt;
Array array = output.ToArray();&lt;br /&gt;
foreach (int obj in array)&lt;br /&gt;
Console.Write(obj);&lt;br /&gt;
Console.WriteLine("");&lt;/p&gt;
&lt;p&gt;}&lt;br /&gt;
else&lt;br /&gt;
{&lt;br /&gt;
if (input.Count &gt; 0)&lt;br /&gt;
{&lt;br /&gt;
//入栈&lt;br /&gt;
stack.Push(input.Pop());&lt;br /&gt;
SearchStack(input, stack, output);&lt;br /&gt;
input.Push(stack.Pop());&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;if (stack.Count &gt; 0)&lt;br /&gt;
{&lt;br /&gt;
//出栈&lt;br /&gt;
output.Push(stack.Pop());&lt;br /&gt;
SearchStack(input, stack, output);&lt;br /&gt;
stack.Push(output.Pop());&lt;br /&gt;
}&lt;br /&gt;
}&lt;br /&gt;
}&lt;br /&gt;
[/code]&lt;/p&gt;
&lt;p&gt;输入的数字首先入栈到input中，stack是我们程序中实际模拟的栈的操作，该题主要考察的是对递归算法的理解，属于一个很经典的题目&lt;/p&gt;
&lt;p&gt;上面一题有一个变形，就是给出一个输入序列和一个输出序列，如何判断该序列是不是该输入序列入栈后的出栈顺序&lt;/p&gt;
&lt;p&gt;比如网上流传的某笔试题是这样的&lt;/p&gt;
&lt;p&gt;题目：输入两个整数序列。其中一个序列表示栈的push顺序，   &lt;/p&gt;
&lt;p&gt;判断另一个序列有没有可能是对应的pop顺序。&lt;/p&gt;
&lt;p&gt;为了简单起见，我们假设push序列的任意两个整数都是不相等的。&lt;/p&gt;
&lt;p&gt;比如输入的push序列是1、2、3、4、5，那么4、5、3、2、1就有可能是一个pop系列。&lt;/p&gt;
&lt;p&gt;因为可以有如下的push和pop序列：&lt;/p&gt;
&lt;p&gt;push 1，push 2，push 3，push 4，pop，push 5，pop，pop，pop，pop，&lt;/p&gt;
&lt;p&gt;这样得到的pop序列就是4、5、3、2、1。&lt;/p&gt;
&lt;p&gt;但序列4、3、5、1、2就不可能是push序列1、2、3、4、5的pop序列&lt;/p&gt;
&lt;p&gt;这个题目要解其实我们可以模拟一个栈，然后通过栈顶得元素和输入序列进行比较，如果没有的，则往前继续入栈，知道找到出栈的那个数字为止，如果中间没有找到，且栈中还有元素，则查找失败&lt;/p&gt;
&lt;p&gt;[code language="csharp"]&lt;br /&gt;
public static bool CheckStack(int[] input, int[] output, int length)&lt;br /&gt;
{&lt;br /&gt;
int indexOfInput, indexOfOutput;&lt;br /&gt;
indexOfInput = 0;&lt;br /&gt;
indexOfOutput = 0;&lt;br /&gt;
System.Collections.Generic.Stack&amp;lt;int&gt; stack = new Stack&amp;lt;int&gt;();&lt;/p&gt;
&lt;p&gt;//初始化&lt;br /&gt;
while (input[indexOfInput] != output[0])&lt;br /&gt;
{&lt;br /&gt;
stack.Push(input[indexOfInput]);&lt;br /&gt;
indexOfInput++;&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;//入栈&lt;br /&gt;
stack.Push(input[indexOfInput]);&lt;br /&gt;
indexOfInput++;&lt;/p&gt;
&lt;p&gt;//check&lt;br /&gt;
while (indexOfOutput &amp;lt; length)&lt;br /&gt;
{&lt;br /&gt;
if (stack.Count != 0 &amp;amp;&amp;amp; stack.Peek() == output[indexOfOutput])&lt;br /&gt;
{&lt;br /&gt;
//栈有元素相等，pop&lt;br /&gt;
stack.Pop();&lt;br /&gt;
indexOfOutput++;&lt;br /&gt;
}&lt;br /&gt;
else&lt;br /&gt;
{&lt;br /&gt;
if (indexOfInput &amp;lt; length)&lt;br /&gt;
{&lt;br /&gt;
//入栈&lt;br /&gt;
stack.Push(input[indexOfInput]);&lt;br /&gt;
indexOfInput++;&lt;br /&gt;
}&lt;br /&gt;
else&lt;br /&gt;
{&lt;br /&gt;
return false;&lt;br /&gt;
}&lt;br /&gt;
}&lt;br /&gt;
}&lt;br /&gt;
return true;&lt;br /&gt;
}&lt;br /&gt;
[/code]&lt;/p&gt;
&lt;p&gt;上面是两个很典型的关于出栈序列相关的题目，接下来另外一个题目&lt;/p&gt;
&lt;p&gt;输入序列为一串数字，有N个，互不相等，求输入序列一共有多少种&lt;/p&gt;
&lt;p&gt;这个题目的解法就是卡特兰数的推导过程，有兴趣的同学可以去看看推导过程。&lt;/p&gt;
&lt;p&gt;此题有多种扩展题目，比如编程之美4.3的买票找零问题&lt;/p&gt;
&lt;p&gt;假设有2N个人在排队买票，其中有N个人手持50元的钞票，另外有N个人手持100元的钞票，假设开始售票时，售票处没有零钱，问这2N个人有多少种排队方式，不至使售票处出现找不开钱的局面&lt;/p&gt;
&lt;p&gt;在比如这个问题，此题是搜狐的笔试题&lt;/p&gt;
&lt;p&gt;四对括号可以有多少种匹配排列方式？比如两对括号可以有两种：（）（）和（（））&lt;/p&gt;
&lt;p&gt;这些题目本质其实都可以归纳到栈的出栈序列有多少种这个上面去。&lt;/p&gt;
&lt;p&gt;栈并不是一个单独的数据结构，其实在很多其他的数据结构相关的使用中也能看到栈的影子&lt;/p&gt;
&lt;p&gt;二叉树&lt;/p&gt;
&lt;p&gt;在我的另外一篇Post&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2010/12/23/1915316.html"&gt;二叉树的非递归遍历&lt;/a&gt;中，其实可以发现二叉树的前序和中序遍历的代码是惊人的相似，唯一不同之处是&lt;font color="#ff0000"&gt;前序是在入栈的时候打印元素，而中序则是在出栈的时候打印元素&lt;/font&gt;，而如果我们已知了一个二叉树的前序，那这个二叉树有多少种排列呢？如果你想到了卡特兰数，恭喜你，答对了。&lt;/p&gt;
&lt;p&gt;另外二叉树的后续遍历也能用栈来写出很优雅的代码，想看的可以点击&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2010/12/23/1915316.html"&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;队列&lt;/p&gt;
&lt;p&gt;用两个栈能实现队列这个数据结构，具体的实现，就留给读者自己解决了，呵呵。。。&lt;/p&gt;</summary></entry><entry><title>Heritrix学习系列导航</title><link href="http://blog.michaelyin.info/2011/10/10/heritrix%e5%ad%a6%e4%b9%a0%e7%b3%bb%e5%88%97%e5%af%bc%e8%88%aa/" rel="alternate"></link><updated>2011-10-10T07:52:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2011-10-10:2011/10/10/heritrix%e5%ad%a6%e4%b9%a0%e7%b3%bb%e5%88%97%e5%af%bc%e8%88%aa/</id><summary type="html">&lt;p&gt;终于赶在去TX面试之前把这个系列拖着写完了，话说时间拖的也够久的了。没办法，一直都太忙了。。。各种事情，希望早点把工作搞定，以后会把Heritrix和Lucene整合专门在写几篇Post，呵呵\~最后祝自己明天好运\~&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2011/08/25/2153633.html"&gt;Heritrix之旅之CrawlController&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2011/08/25/2153767.html"&gt;Heritrix之旅之Frontier&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2011/10/07/2200412.html"&gt;Heritrix之旅之ToeThread&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2011/10/10/2205699.html"&gt;Heritrix之旅之Processor&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Heritrix之旅之Processor</title><link href="http://blog.michaelyin.info/2011/10/10/heritrix%e4%b9%8b%e6%97%85%e4%b9%8bprocessor/" rel="alternate"></link><updated>2011-10-10T07:47:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2011-10-10:2011/10/10/heritrix%e4%b9%8b%e6%97%85%e4%b9%8bprocessor/</id><summary type="html">&lt;p&gt;实际的url的处理是在toethread中进行的，toethread从Frontier中请求待处理的url,并将其放到一系列Processor中进行处理&lt;/p&gt;
&lt;p&gt;可以以流水线上的处理流程来想象Processor，流水线上的产品就是url，由于处理的processor主要着重于不同的阶段和功能，所以，heritrix将其processor分成了五个大类。&lt;/p&gt;
&lt;p&gt;1 Pre-fetch&lt;/p&gt;
&lt;p&gt;这里面包含一些需要在像web服务器发出请求之前的一些处理的processor,比如检查url的scope&lt;/p&gt;
&lt;p&gt;2 Fetch&lt;/p&gt;
&lt;p&gt;这里面的是获取web信息的processor,不同的processor支持不同的协议，比如FetchHTTP支持http,FetchDNS支持dns&lt;/p&gt;
&lt;p&gt;3 Extractor&lt;/p&gt;
&lt;p&gt;这个里面就是涉及到对抓取的web信息进行内容的提取了，可以对其中的链接进行处理，放到以后进行抓取，也可以根据自己的业务逻辑进行相应的扩展&lt;/p&gt;
&lt;p&gt;4 Write/index&lt;/p&gt;
&lt;p&gt;将抓取的信息存储到硬盘中&lt;/p&gt;
&lt;p&gt;\5. Post-processing&lt;/p&gt;
&lt;p&gt;将Extractor中找到的url放入到Frontier中待以后进行抓取，进行processor的清理工作&lt;/p&gt;
&lt;p&gt;所有的处理类都是继承了Processor，这样就能以一定的抽象统一对所有的processor进行管理，而每个具体的processor只需要根据自己的需要重写相应的处理方法即可&lt;/p&gt;
&lt;p&gt;CrawlController在setupCrawlModules中会初始化processorChains，ProcessorChainList这个实例就是整个处理器的一个容器，它下面根据上面所说的分类构成了5个ProcessorChain，需要注意的是初始化的时候顺序是很重要的，因为这个顺序关系到url处理时候的顺序。ProcessorChain中包含了所需要的processor&lt;/p&gt;
&lt;p&gt;多线程相关&lt;/p&gt;
&lt;p&gt;Processor的实例在CrawlController中会存放在ProcessorChain中，如果有特殊需要为了保证每个线程有属于自己的Processor,只需要实现InstancePerThread这个端口即可&lt;/p&gt;
&lt;p&gt;[code lang="java"] private Processor getProcessor(Processor processor)
{&lt;br /&gt;
if(!(processor instanceof InstancePerThread)) {&lt;br /&gt;
// just use the shared Processor&lt;br /&gt;
return processor;&lt;br /&gt;
}&lt;br /&gt;
// must use local copy of processor&lt;br /&gt;
Processor localProcessor = (Processor) localProcessors.get(&lt;br /&gt;
processor.getClass().getName());&lt;br /&gt;
if (localProcessor == null) {&lt;br /&gt;
localProcessor = processor.spawn(this.getSerialNumber());&lt;br /&gt;
localProcessors.put(processor.getClass().getName(),localProcessor);&lt;br /&gt;
}&lt;br /&gt;
return localProcessor;&lt;br /&gt;
}[/code]&lt;/p&gt;
&lt;p&gt;这个方法对于需要新建的Processor通过反射重新建立实例并存放在ToeThread的localProcessors中&lt;/p&gt;
&lt;p&gt;当时在看一个扩展Processor的时候觉得很奇怪的就是本来下意识的觉得多个线程公用一个东西应该使用同步，所以看到Processor并没有使用同步的关键字觉得很奇怪，后来仔细想了一下觉得这个地方其实是有它的道理的。因为同步是为了什么？为了共享资源访问的时候不出问题，而这里处理url的过程中Processor的处理本来就没什么共享的东西需要进行同步，所以这样设计是没有问题的。这也告诉我们，对于多线程调用的一些方法，同步关键字并不是必须的，同步的本质是对于共享资源访问时的同步&lt;/p&gt;</summary></entry><entry><title>Heritrix之旅之ToeThread</title><link href="http://blog.michaelyin.info/2011/10/07/heritrix%e4%b9%8b%e6%97%85%e4%b9%8btoethread/" rel="alternate"></link><updated>2011-10-07T02:37:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2011-10-07:2011/10/07/heritrix%e4%b9%8b%e6%97%85%e4%b9%8btoethread/</id><summary type="html">&lt;p&gt;Heritrix是一个多线程的程序，里面使用工作线程来处理url，这些工作线程称为torThreads，这些toethread统一的被ToePool所管理,Toepool通过setSize方法来管理运行的toethread数目&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
  public void setSize(int newsize) {
        targetSize = newsize;
        int difference = newsize - getToeCount();
        if (difference &amp;gt; 0) {
            // must create threads
            for (int i = 1; i &amp;lt;= difference; i++) {
                startNewThread();
            }
        } else {
            // must retire extra threads
            int retainedToes = targetSize;
            Thread[] toes = this.getToes();
            for (int i = 0; i &amp;lt; toes.length; i++) {
                if (!(toes[i] instanceof ToeThread)) {
                    continue;
                }
                retainedToes--;
                if (retainedToes &amp;gt;= 0) {
                    continue; // this toe is spared
                }
                // otherwise:
                ToeThread tt = (ToeThread) toes[i];
                tt.retire();
            }
        }
    }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ToeThread&lt;/span&gt;&lt;span class="err"&gt;从&lt;/span&gt;&lt;span class="n"&gt;Frontier&lt;/span&gt;&lt;span class="err"&gt;中获取待处理的&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="err"&gt;，然后&lt;/span&gt;&lt;span class="n"&gt;ToeThread&lt;/span&gt;&lt;span class="err"&gt;对&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="err"&gt;进行一系列的处理，当所有的处理流程完成之后，调用&lt;/span&gt;&lt;span class="n"&gt;Frontier&lt;/span&gt;&lt;span class="err"&gt;的&lt;/span&gt;&lt;span class="n"&gt;finished&lt;/span&gt;&lt;span class="err"&gt;方法告知&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="err"&gt;抓取完毕，&lt;/span&gt;&lt;span class="n"&gt;ToeThread&lt;/span&gt;&lt;span class="err"&gt;重新获取新的&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;

&lt;span class="err"&gt;这是&lt;/span&gt;&lt;span class="n"&gt;ToeThread&lt;/span&gt;&lt;span class="err"&gt;中的&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="err"&gt;方法的代码&lt;/span&gt;

&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
                &lt;span class="c1"&gt;//从Frontier处获取待处理的url&lt;/span&gt;
                &lt;span class="n"&gt;CrawlURI&lt;/span&gt; &lt;span class="n"&gt;curi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFrontier&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                &lt;span class="n"&gt;synchronized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;continueCheck&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="n"&gt;setCurrentCuri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;//对url进行处理&lt;/span&gt;
                &lt;span class="n"&gt;processCrawlUri&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                &lt;span class="n"&gt;setStep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STEP_ABOUT_TO_RETURN_URI&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;continueCheck&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                &lt;span class="c1"&gt;//通知Frontier已经完成&lt;/span&gt;
                &lt;span class="n"&gt;synchronized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFrontier&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;finished&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentCuri&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;setCurrentCuri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结合前面Frontier的图，可能看的就会明白一点了。&lt;/p&gt;</summary></entry><entry><title>C语言中自增的疑惑</title><link href="http://blog.michaelyin.info/2011/09/14/c%e8%af%ad%e8%a8%80%e4%b8%ad%e8%87%aa%e5%a2%9e%e7%9a%84%e7%96%91%e6%83%91/" rel="alternate"></link><updated>2011-09-14T03:43:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2011-09-14:2011/09/14/c%e8%af%ad%e8%a8%80%e4%b8%ad%e8%87%aa%e5%a2%9e%e7%9a%84%e7%96%91%e6%83%91/</id><summary type="html">&lt;p&gt;由于要准备笔试，所以捡起了好久不看的C语言，运算符优先级真的是挺蛋疼的，这不，今天在那折腾的时候就被一个问题给纠结住了，自己不能解释这种现象，就发到园子里面请教一下大家了。&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
          int y,r;
          y=3;
          r=0;
          r= 2*y+(++y);
          printf("%d",r);
          return 0;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;代码其实很简单，我写这个代码主要是想知道&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="err"&gt;后的值对表达式中的其他地方的&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="err"&gt;是不是有影响的，这个代码在&lt;/span&gt;&lt;span class="n"&gt;CodeBlock&lt;/span&gt;&lt;span class="err"&gt;中执行的结果是&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;由于&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;其实的结果是&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;，所以前面用来计算的&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="err"&gt;的值其实是&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;到这里，我就以为&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="err"&gt;的值在&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="err"&gt;自增后在别处是没有影响的。&lt;/span&gt;

&lt;span class="err"&gt;但是，诡异的事情接下来发生了&lt;/span&gt;

&lt;span class="err"&gt;我将&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="err"&gt;改成了&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
          &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
运行的结果竟然是8,这下我就觉得很纠结了，就没了一个乘法，这地方就成了这样么？我觉得这个地方如果和前面要统一的话就应该输出7才对，后来在C#中写了相似的代码，结果是7，但是对于C这个地方的处理确实很疑惑，也发在园子里面看看大家对此的看法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="err"&gt;我的环境是&lt;/span&gt;&lt;span class="n"&gt;Xp&lt;/span&gt; &lt;span class="n"&gt;CodeBlock10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
 
~~~~&lt;/p&gt;</summary></entry><entry><title>编程之美2.18学习笔记</title><link href="http://blog.michaelyin.info/2011/08/14/%e7%bc%96%e7%a8%8b%e4%b9%8b%e7%be%8e2-18%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/" rel="alternate"></link><updated>2011-08-14T03:45:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2011-08-14:2011/08/14/%e7%bc%96%e7%a8%8b%e4%b9%8b%e7%be%8e2-18%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/</id><summary type="html">&lt;p&gt;解题过程中没有使用书上提供的动态规划的算法，在这里把解题思路写一下。&lt;/p&gt;
&lt;p&gt;题目是这样的，有个包含2n个元素的无序数组，现在用算法将这个数组进行分割，使得两个子数组的和最相近&lt;/p&gt;
&lt;p&gt;我们首先来想像将数组分割后的情况，假设分割后的两个数组分别为A和B，A[0]和B[0]之间肯定是存在一个差值的，假设我们用A[0]-B[0]，得到的值加上A[1]-B[1]，这样最后得到的值的绝对值肯定是所有情况里面最小的，因为最后得到的绝对值其实就是两个数组的和的差值。&lt;/p&gt;
&lt;p&gt;现在我们已经隐隐感觉到，其实两个元素之间的差值是我们可以拿来用的一个条件。我们只需要保证差值的绝对值为最小，这样得到的两个数组就是我们所求的结果了。然后还有一个问题，两个数组对应元素之间的差值是不一样的。比如A[0]-B[0]的差值是1,A[1]
–B[1]的差值可能是99，我们需要一种策略来保证我们在计算这个差值的绝对值一定是最小。借鉴一下权重的思想，我们需要把本来差值绝对值最大的那一组A和B对应的元素放到前面去，然后依次排序，这样得到的相当于就是权重一个从大到小的顺序，我们遍历的时候就能够得到正确的结果，不至于前面出现了很多小的差值，然后因为后面出现了一个很大的差值，（比如99）使得得到的结果错误。&lt;/p&gt;
&lt;p&gt;下面完整的将一遍解题思路，首先将原来的数组进行排序，排序是能够使得元素之间的差值之和最小（但是写这篇博客的时候我觉得这一步不是必须的，因为我需要的是差值信息，由于时间有限，就还是按照我以前的思路讲了）。排序完成之后我将元素按照排序的顺序放到两个数组subArray1和subArray2中去，这里subArray1的每个元素都会小于等于对应的subArray2元素。在遍历放到subArray1和subArray2的时候顺便将两者的差值信息专门用subSub数组放起来。&lt;/p&gt;
&lt;p&gt;现在我们就有了三个数组，两个是元素，一个是元素对应的差值的信息，但是差值信息由权重的问题，考虑到我上面说的，我们需要将最大的差值放到前面去，这样在这里需要对subSub进行排序，需要注意的是，排序移动元素的时候，subArray1和subArray2的元素也需要进行相对应的移动。&lt;/p&gt;
&lt;p&gt;到这里基本的东西都准备好了，然后就是一个for循环，对每个差值进行比较，原则就是一个，保证绝对值最小，如果需要将差值加法转换为减法运算，只需要调换subArray1和subArray2对应的元素就行了。这样遍历之后就能保证求出的差值的绝对值最小了。&lt;/p&gt;
&lt;p&gt;下面贴出我试验的代码&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
public static void main(String[] args) {
        // TODO Auto-generated method stub&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
                &lt;span class="c1"&gt;// 初始排序没有写，为了快速解题就直接是写的已经排好了的数组&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;testArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;Test218&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Test218&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 数组用来存放结果&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;subArray1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;subArray2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="c1"&gt;// 存放差值&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;subSub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// 将两个数分别放到两个数组中去，同时计算两个数的差值，放到subSub数组中&lt;/span&gt;
            &lt;span class="n"&gt;subArray1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;subArray2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subArray1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subArray2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="c1"&gt;// 对subSub进行遍历&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// 求绝对值&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// 调换&lt;/span&gt;
                &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subArray1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subArray2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;subArray1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;subArray2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 根据subSub数组中的差值进行快速排序，确保最大的差值放在最前面&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;subArray1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;subArray2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 先用冒泡，可以用快排优化&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// 三个数组中的元素都需要进行调换&lt;/span&gt;
                    &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subArray1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subArray1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subArray2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subArray2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subSub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;array2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;array2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>编程之美2.14学习笔记</title><link href="http://blog.michaelyin.info/2011/07/31/%e7%bc%96%e7%a8%8b%e4%b9%8b%e7%be%8e2-14%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/" rel="alternate"></link><updated>2011-07-31T12:17:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2011-07-31:2011/07/31/%e7%bc%96%e7%a8%8b%e4%b9%8b%e7%be%8e2-14%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/</id><summary type="html">&lt;p&gt;再看编程之美2.14的时候发现了一个书上没有讲到的思路，就在此记录一下，也希望能给读者扩宽一下思路。&lt;/p&gt;
&lt;p&gt;2.14的问题非常简单，就是给定一个数组，求这个数组的最大子数组之和。&lt;/p&gt;
&lt;p&gt;书上的解法我就不赘述了，在这里主要讲一下我想到的思路。子数组之和最大，肯定有一个开始的元素，和一个结束的元素，特殊一点的话，两个是一个元素，这种特殊情况下最大子数组其实就是一个数了。然后最大从数组第一个数开始我们求和，从第一个元素到第N个元素，我们可以建立一个数组专门来存储这个求出来的和，而求出的和的右边到左边差距最大的情况的时候，我们就可以根据此得出最大子数组的和。&lt;/p&gt;
&lt;p&gt;在遍历的过程中，我们需要定义一个变量来存储算出来的最小的和，因为我们想加的和与最小的和的差值才有可能求出最大的子数组的和。比如我们已经有了一个最小的和minSum,如果遍历过程中遇到了比这小的，那么我们就需要把这个进行替换。对于初始化的情况，我们的最小的和应该是为0，这样就把每个数字都包含进来了。&lt;/p&gt;
&lt;p&gt;程序运行的时候是从里面已经存在了一个元素开始的。这里需要注意的是minSum的处理，如果第一个元素是小于零的话相当于第一个sumOfArray求出的是小于0的，那么我们就需要把minSum换成这个小于0的数字。然后开始遍历操作。&lt;/p&gt;
&lt;p&gt;遍历过程中总是将求出的和与minSum进行比较，如果能大于最大的那个差值则进行替换，最后返回的就是我们需要求出的子数组之和的最大值。&lt;/p&gt;
&lt;p&gt;下面贴出我用Java实现的代码&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
  public static int Test1(int[] array) {
        int sumOfArray = array[0];
        int min = (array[0] &amp;lt; 0) ? array[0] : 0;
        int max = array[0];
        for (int i = 1; i &amp;lt; array.length; i++) {
            sumOfArray += array[i];
            if (sumOfArray &amp;lt; min) {
                min = sumOfArray;
            } else {
                if (sumOfArray - min &amp;gt; max)
                    max = sumOfArray - min;
            }
        }
        return max;
    }
~~~~&lt;/p&gt;
&lt;p&gt;另外关于2.14的扩展问题一也想在这里提一下，书上给出的思路貌似有点问题，我现在把我整理的思路提出来。首先求出没有同时经过首尾的最大和，这个可以用上面提到的方法做，然后我们需要求出经过首尾的最大和，但是可以看到全部节点的和是一个定值，这个问题其实可以转换为求出一个没有同时经过首尾的最小和，求出来以后用总数减去求出的最小值，然后拿这个值跟没有经过首尾的最大和进行比较，这样就能正确的求出结果。而这两个问题其实十分类似，所以其实可以放到一个for循环中完成，具体的代码这里就不写了。&lt;/p&gt;</summary></entry><entry><title>BlogEngine学习系列</title><link href="http://blog.michaelyin.info/2011/07/09/blogengine%e5%ad%a6%e4%b9%a0%e7%b3%bb%e5%88%97/" rel="alternate"></link><updated>2011-07-09T08:57:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2011-07-09:2011/07/09/blogengine%e5%ad%a6%e4%b9%a0%e7%b3%bb%e5%88%97/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2010/10/23/1859464.html"&gt;BlogEngine中的Provider模式（上）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2010/10/23/1859492.html"&gt;BlogEngine中的Provider模式（下）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2010/11/26/1889217.html"&gt;BlogEngine中的BlogSettings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2011/03/13/1982589.html"&gt;BlogEngine中自定义主题的实现&lt;/a&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2011/03/17/1986689.html"&gt;BlogEngine中的Extensinon实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2011/03/19/1989046.html"&gt;BlogEngine中的widget机制&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2011/04/17/2018986.html"&gt;BlogEngine中的js和css访问处理&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>初始化那些事儿</title><link href="http://blog.michaelyin.info/2011/05/27/%e5%88%9d%e5%a7%8b%e5%8c%96%e9%82%a3%e4%ba%9b%e4%ba%8b%e5%84%bf/" rel="alternate"></link><updated>2011-05-27T03:03:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2011-05-27:2011/05/27/%e5%88%9d%e5%a7%8b%e5%8c%96%e9%82%a3%e4%ba%9b%e4%ba%8b%e5%84%bf/</id><summary type="html">&lt;p&gt;先来看看这段代码&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
    class Program
    {
        static void Main(string[] args)
        {
            Circle objTest = new Circle();
            Console.ReadLine();
        }
    }
    public class Print
    {
        public Print(String text)
        {
            Console.WriteLine(text);
        }
    }
    public class Shape
    {
        //静态字段
         static Print staticSbj = new Print("1");
        //对象级别的变量
         Print obj = new Print("2");
        static Shape()
        {
            //静态构造函数中进行初始化
            staticSbj = new Print("3");
        }
        public Shape()
        {
            //构造函数
              staticSbj = new Print("4");
            obj = new Print("5");
        }
    }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Circle&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Shape&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//静态字段&lt;/span&gt;
     &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt; &lt;span class="n"&gt;staticObj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Print&lt;/span&gt; &lt;span class="n"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;staticObj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;staticObj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;看到这里请先试着推理一下程序运行的结果，按照你所掌握的知识。这里开始我们慢慢分析初始化中的几个知识点而不要先急着揭晓答案。&lt;/span&gt;

&lt;span class="err"&gt;对象初始化和类的初始化，对象初始化所对应的是对象，而类初始化所对应的是类。类在什么时候进行初始化呢？在程序中第一次需要用到类中的静态字段或者实例化类的对象的时候。类在程序中只需要初始化一次，类初始化的时候它的静态字段就会被分配内存并赋予相应的值。初始化的方式有两种，一种是直接在声明的地方直接进行赋值操作，还有一种是在静态构造函数中进行统一的初始化操作。在代码中就像这样&lt;/span&gt;

&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
      &lt;span class="c1"&gt;//静态字段&lt;/span&gt;
         &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt; &lt;span class="n"&gt;staticObj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;staticObj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在两种方式都存在的方式下，是先执行声明变量那个地方的代码，然后执行静态构造方法里面的代码，有人可能会问了，如果上面那个static
Print staticObj2 = new Print("6"); 我声明的时候不赋值，只写static Print
staticObj2;会怎样？那么它先执行到静态变量那个地方的时候会给staticObj2
一个默认值，因为是引用，所以是null，然后到静态构造方法里面给其赋值。关于静态构造方法在这里我想说的是它实现的功能和声明时候的赋值是差不多的，由于它不具备对象构造函数通过传入参数对对象进行动态构造的功能，所以个人觉得基本上也就是将静态字段的赋值操作集中到了一起，编程的时候更好看一些。&lt;/p&gt;
&lt;p&gt;对象级别初始化里面也是类似的，所以这里就不在多说了。&lt;/p&gt;
&lt;p&gt;然后上面的代码有继承。所以继承情况下到底是怎么处理的呢？&lt;/p&gt;
&lt;p&gt;对于这个问题，大家只需要把握一条原则，那就是在子类对象调用对象构造函数之前，必须保证子类的对象是已经完成了”初始化”的，为什么这里打引号，因为还没有经过对象构造方法，所以不能称为完成了初始化。如果是子类后来附加的变量，比如上面的obj2
这个变量，这个就是在继承的时候在父类基础上增加的一个，如果是通过父类继承过来的变量，那么就要经过父类的构造方法处理。&lt;/p&gt;
&lt;p&gt;好了，现在来揭晓答案吧。上面的程序执行的结果是&lt;span style="color: #ff0000;" color="#ff0000"&gt;6
8 7 1 3 2 4 5 9 10&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;.Net中的初始化和java中后不同(java的稍后会提)是一种“自顶向下”的初始化，能在上面初始化的我就不会等到下面搞好了在来进行。先初始化父类的对象的字段，静态字段不用说肯定先进行，也只用进行这一次类初始化，类初始化的细节上面已经讲到了，这里大家对着结果看看应该就能了解了，然后是初始化obj2
这个变量，这里已经进入对象的初始化阶段了，由于还继承了父类的一些变量，所以现在需要把那些变量都进行初始化，所以要进行父类对象的初始化。这里由于父类这个类本身就没进行初始胡啊，所以又要把类初始化，然后初始化对象，最后，调用子类的构造方法，对父类和子类的变量在一起进行初始化。&lt;/p&gt;
&lt;p&gt;Java中的初始化的策略其实几个关键点和我上面先说的也是一样的，只是它不是按照自顶向下，而是一个从下往上的顺序。&lt;/p&gt;
&lt;p&gt;下面我贴出移植到java下的代码&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
public class Test {&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * @param args&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Circle&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;      
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;class Print {
    public Print(String text) {
        System.out.println(text);
    }
}&lt;/p&gt;
&lt;p&gt;class Shape {
       //静态字段
    static Print staticSbj = new Print("1");
    //对象级别的变量
    Print obj = new Print("2");
    static
    {
        //静态构造函数中进行初始化
        staticSbj = new Print("3");
    }
    public Shape()
    {
        //构造函数
        staticSbj = new Print("4");
        obj = new Print("5");
    }
}&lt;/p&gt;
&lt;p&gt;class Circle extends Shape {
      //静态字段
    static Print staticObj2 = new Print("6");
    Print obj2 = new Print("7");
    static
    {
        staticObj2 = new Print("8");
    }
    public Circle()
    {
        staticObj2 = new Print("9");
        obj2 = new Print("10");
    }
}
~~~~&lt;/p&gt;
&lt;p&gt;&lt;span style="font-family: 'Courier New';" face="Courier New"&gt;在java下面运行的结果为&lt;span style="color: #ff0000;" color="#ff0000"&gt;1
3 6 8 2 4 5 7 9 10&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #000000; font-family: 'Courier New';" color="#000000" face="Courier New"&gt;java下面的运行结果看起来更好理解，先类，然后对象，层次很清楚。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #000000; font-family: 'Courier New';" color="#000000" face="Courier New"&gt;关于初始化的实现的细节我想上面这两个例子已经呈现的很清楚了，但是这里我也有稍许疑问，为什么.net会采取相对java有所不同的策略，有什么深层次的考虑？本人水品有限，还是希望园子的高人能解答一二。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #000000; font-family: 'Courier New';" color="#000000" face="Courier New"&gt;在这里另外贴出一篇Blog，它提到了.net里面那个初始化顺序的不同&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blogs.msdn.com/b/ericlippert/archive/2008/02/15/why-do-initializers-run-in-the-opposite-order-as-constructors-part-one.aspx"&gt;http://blogs.msdn.com/b/ericlippert/archive/2008/02/15/why-do-initializers-run-in-the-opposite-order-as-constructors-part-one.aspx&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>BlogEngine中的js和css访问处理</title><link href="http://blog.michaelyin.info/2011/04/17/blogengine%e4%b8%ad%e7%9a%84js%e5%92%8ccss%e8%ae%bf%e9%97%ae%e5%a4%84%e7%90%86/" rel="alternate"></link><updated>2011-04-17T09:14:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2011-04-17:2011/04/17/blogengine%e4%b8%ad%e7%9a%84js%e5%92%8ccss%e8%ae%bf%e9%97%ae%e5%a4%84%e7%90%86/</id><summary type="html">&lt;p&gt;BlogEngine中将对css和js这种常用资源的访问通过httphandler进行了一次封装，并不是直接请求服务器的文件，服务器读取硬盘上的文件然后返回给客户端，而是将这种常用访问的资源通过缓存存储在了内存中，然后通过缓存依赖检查文件是否被更改，这样带来的好处就是在访问量比较大的时候能够减少读取硬盘的次数和时间，当然实际应用中的效果到底如何由于条件不够，所以本人不能给出实际数据，有条件的朋友可以提供一下。&lt;/p&gt;
&lt;p&gt;BlogEngine中的Css文件是和BlogEngine的主题这个功能相关的，主题文件夹下每个相应文件夹下都有一个style.css被site.master所引用，BlogBasePage在运行的时候根据选定的主题的名字加载相应主题下的模板页，模板页中的Head中是有相应的样式表的链接的，然后再BlogBasePage的Onload方法中，通过CompressCss遍历Head中的控件，找到css，然后统一修改css的访问的路径通过httphandler来访问。&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
      protected virtual void CompressCss()
        {
            if (Request.QueryString["theme"] != null)
                return;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="n"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Controls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;HtmlControl&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;HtmlControl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StringComparison&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RelativeWebRoot&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;themes/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BlogSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Theme&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/css.axd?name=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlogSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnableViewState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Css&lt;/span&gt;&lt;span class="err"&gt;处理的&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="err"&gt;的名字叫&lt;/span&gt;&lt;span class="n"&gt;CssHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;它通过查询字符串来获得需要访问的文件名，然后再缓存中进行查找，没有的话在本地文件中进行查找，并在查找成功后将数据流插入到缓存中去，为了防止文件修改，加入了缓存依赖。&lt;/span&gt;

&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
              &lt;span class="c1"&gt;// In cache?&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RawUrl&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// Not found in cache, let&amp;#39;s load it up&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StringComparison&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RetrieveRemoteCss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RetrieveLocalCss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// Found in cache&lt;/span&gt;
                    &lt;span class="n"&gt;css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RawUrl&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
SetHeaders方法通过客户端缓存策略进一步提高了性能&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VaryByHeaders&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Accept-Encoding&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetExpires&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToUniversalTime&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;AddDays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMaxAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetRevalidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpCacheRevalidation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AllCaches&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;etag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot; + hash.ToString() + &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;incomingEtag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;If-None-Match&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetETag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;etag&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetCacheability&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpCacheability&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Public&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;js的处理的JavaScriptHandler和Csshandler基本是差不多的，这里就不在重复了，不过由于js和css又有一点区别。css文件的链接是放在页面的Head里面，所以通过遍历Head统一修改url就可以完成统一请求HttpHandler，而js有点特殊，它可能需要放在页面底部（事实上Blogengine中的脚本引用都是放在底部的，在网上查了一下，据说是下载js会阻塞其他资源的下载，将导致整体响应时间变长），所以js的统一修改访问url是通过AddJavaScriptInclude这个方法来实现的。AddJavaScriptInclude修改js的路径为通过httphandler访问。&lt;/p&gt;</summary></entry><entry><title>Cookie学习笔记</title><link href="http://blog.michaelyin.info/2011/04/13/cookie%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/" rel="alternate"></link><updated>2011-04-13T12:29:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2011-04-13:2011/04/13/cookie%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/</id><summary type="html">&lt;p&gt;Cookie用来用来将少量的数据存储到客户端的硬盘上，其形式是用户名@网站地址[数字].txt这个样子，当Cookie想对应的网站的时候，浏览器将存储在客户端的Cookie发送到服务器，服务器可以读取Cookie
中的数据并进行修改，由于Cookie是存储在客户端机器上的，所以在客户端也可以读写相应的Cookei文件.&lt;/p&gt;
&lt;p&gt;Cookie中信息的保存是以键值对这样的形式来存储的。&lt;/p&gt;
&lt;p&gt;Cookie的expires制定了cookie的生存期，如果不设置的话，cookie只在浏览器访问网站期间存在，关闭浏览器后，这个cookie就失效。如果设置了的话，浏览器会把cookie保存到相应的文件夹中(不同的浏览器保存的路径不一样)，一旦超过了expires中设置的日期，浏览器会将cookie删除。&lt;/p&gt;
&lt;p&gt;Cookie的Domain和Path标志了Cookie可以共用的范围，具体的信息可以查看&lt;a href="http://www.cnblogs.com/winner2009/archive/2011/04/11/2011452.html"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在服务器端是不能直接删除客户端的Cookie的，一般是通过将Cookie的到期日期设置为一个过去的日期，让客户端的浏览器来删除Cookie。当用户下一次向设置该
Cookie 的域或路径内的页发出请求时，浏览器将确定该 Cookie
已到期并将其移除。在这里需要注意的是，如果设置了过期时间，你在Request读取这个Cookie的时候通过它的过期那个属性来获取它的过期时间是获取不到的，因为客户端浏览器发送给服务器的Cookie是不包含过期时间的，而服务器发送给客户端浏览器的Cookie是包含过期时间的。&lt;/p&gt;
&lt;p&gt;实际项目中删除Cookie的是后也碰到了一个很奇怪的问题，网上流传的很多代码都是这样&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
    HttpCookie SingleValueCookie = Request.Cookies["test1"];
    SingleValueCookie.Expires = DateTime.MinValue;
    Response.Cookies.Add(SingleValueCookie);
~~~~&lt;/p&gt;
&lt;p&gt;实际中过期时间的设置没起到作用，后来还是使用AddDay(-1)来解决的这个问题，也不知道是为什么，很奇怪\~&lt;/p&gt;
&lt;p&gt;用到的相关资料&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/leleroyn/articles/1156630.html"&gt;http://www.cnblogs.com/leleroyn/articles/1156630.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/wuxiaoqian726/articles/1778687.html"&gt;http://www.cnblogs.com/wuxiaoqian726/articles/1778687.html&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>BlogEngine中的widget机制</title><link href="http://blog.michaelyin.info/2011/03/19/blogengine%e4%b8%ad%e7%9a%84widget%e6%9c%ba%e5%88%b6/" rel="alternate"></link><updated>2011-03-19T12:45:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2011-03-19:2011/03/19/blogengine%e4%b8%ad%e7%9a%84widget%e6%9c%ba%e5%88%b6/</id><summary type="html">&lt;p&gt;BlogEngine中的widget机制支持在页面可添加一些小的widget，这个功能当时还是特别吸引我的，现在简单的说下实现的原理。&lt;/p&gt;
&lt;p&gt;所有的widget都在一个WidgetZone的容器内，这个容器继承自PlaceHolder，而这个容器是在自定义theme中的模板页中用到的，当这个控件加载的时候，它从数据库中找到关于widget的配置信息。这个配置信息也是DataStore的方式提取和存储的。&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
&amp;lt;?xml version="1.0" encoding="utf-16"?&amp;gt;
&lt;WidgetData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;Settings&gt;&amp;lt;widgets&amp;gt;&amp;lt;widget
  id="b7d72394-7556-4a5b-87ed-c63cbdc915fb" title="Administration"
  showTitle="True"&amp;gt;Administration&amp;lt;/widget&amp;gt;&amp;lt;widget
  id="f8dffe75-8e8c-4732-a3ff-77df966f7220" title="Calendar"
  showTitle="True"&amp;gt;Calendar&amp;lt;/widget&amp;gt;&amp;lt;widget
  id="292c7de9-8d1c-444e-bb66-1c23c28c7c7b" title="Month List"
  showTitle="True"&amp;gt;Month List&amp;lt;/widget&amp;gt;&amp;lt;widget
  id="2b7bef82-7cf2-4e76-88e8-61ec0436a73a" title="Tag cloud"
  showTitle="True"&amp;gt;Tag cloud&amp;lt;/widget&amp;gt;&amp;lt;widget
  id="c7830f7c-2ef5-4c16-85d2-bcbca25d0c6f" title="Search"
  showTitle="True"&amp;gt;Search&amp;lt;/widget&amp;gt;&amp;lt;/widgets&amp;gt;&lt;/Settings&gt;
&lt;/WidgetData&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;读取了配置信息后，根据所能够取到的&lt;/span&gt;&lt;span class="nx"&gt;wieget&lt;/span&gt;&lt;span class="err"&gt;的信息动态的读取&lt;/span&gt;&lt;span class="nx"&gt;widget&lt;/span&gt;

&lt;span class="err"&gt;所有的&lt;/span&gt;&lt;span class="nx"&gt;widget&lt;/span&gt;&lt;span class="err"&gt;放在&lt;/span&gt;&lt;span class="nx"&gt;widgets&lt;/span&gt;&lt;span class="err"&gt;文件夹下，&lt;/span&gt;&lt;span class="nx"&gt;widget.ascx&lt;/span&gt;&lt;span class="err"&gt;负责显示&lt;/span&gt;&lt;span class="nx"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;edit.ascx&lt;/span&gt;&lt;span class="err"&gt;负责对&lt;/span&gt;&lt;span class="nx"&gt;widget&lt;/span&gt;&lt;span class="err"&gt;进行配置，负责显示的&lt;/span&gt;&lt;span class="nx"&gt;widget&lt;/span&gt;&lt;span class="err"&gt;继承自&lt;/span&gt;&lt;span class="nx"&gt;WidgetBase&lt;/span&gt;&lt;span class="err"&gt;，它提供了&lt;/span&gt;&lt;span class="nx"&gt;widget&lt;/span&gt;&lt;span class="err"&gt;所必须的一些信息，比如&lt;/span&gt;&lt;span class="nb"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="err"&gt;和&lt;/span&gt;&lt;span class="nx"&gt;widgetId&lt;/span&gt;&lt;span class="err"&gt;等等&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt;

&lt;span class="err"&gt;下面是动态读取&lt;/span&gt;&lt;span class="nx"&gt;widget&lt;/span&gt;&lt;span class="err"&gt;的代码&lt;/span&gt;

&lt;span class="err"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brush&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="na"&gt;-links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="na"&gt;-line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gutter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="na"&gt;-script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ruler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smart&lt;/span&gt;&lt;span class="na"&gt;-tabs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="na"&gt;-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toolbar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
  &lt;span class="nx"&gt;XmlNodeList&lt;/span&gt; &lt;span class="n"&gt;zone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;XML_DOCUMENT.SelectNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//widget&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nb"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;XmlNode&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;zone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Utils.RelativeWebRoot&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;widgets/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;widget.InnerText&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/widget.ascx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;try&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;WidgetBase&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;WidgetBase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;Page.LoadControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;control.WidgetID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;widget.Attributes&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;.InnerText);
                    control.ID = control.WidgetID.ToString().Replace(&amp;quot;-&amp;quot;, string.Empty);
                    control.Title = widget.Attributes&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;.InnerText;
                                        control.Zone = _ZoneName;

                    if (control.IsEditable)
                        control.ShowTitle = bool.Parse(widget.Attributes&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;showTitle&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;.InnerText);
                    else
                        control.ShowTitle = control.DisplayHeader;

                    control.LoadWidget();
                    this.Controls.Add(control);
                }
                catch (Exception ex)
                {
                    Literal lit = new Literal();
                    lit.Text = &amp;quot;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color:red&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Widget &amp;quot; + widget.InnerText + &amp;quot; not found.&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&amp;quot;;
                    lit.Text += ex.Message;
                    lit.Text += &amp;quot;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;delete&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;javascript:void(0)&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;BlogEngine.widgetAdmin.removeWidget(&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="na"&gt;widget&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Attributes&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;InnerText&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&amp;#39;);&lt;/span&gt;&lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;false&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delete&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;widget&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;X&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&amp;quot;;

                    this.Controls.Add(lit);
                }
            }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Widget的编辑功能则是通过js脚本访问Admin下WidgetEditor.aspx页面，然后通过该页面来进行修改配置。&lt;/p&gt;
&lt;p&gt;Widget的添加则是通过脚本将添加的Widget的type通过ajax的形式返回到WidgetEditor页面，然后进行处理返回控件的html代码，完成widget的添加，实现过程不是很复杂，主要是理解它的整套机制。&lt;/p&gt;</summary></entry><entry><title>char,int转换</title><link href="http://blog.michaelyin.info/2011/03/10/charint%e8%bd%ac%e6%8d%a2/" rel="alternate"></link><updated>2011-03-10T02:42:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2011-03-10:2011/03/10/charint%e8%bd%ac%e6%8d%a2/</id><summary type="html">&lt;p&gt;写一个Console小程序的时候需要用户输入数字，然后在程序中进行获取，本来以为很简单的，没想到也发生了一些曲折。。&lt;/p&gt;
&lt;p&gt;在Console类中，Console.Read获取的用户输入的单个字符，.net内存中的字符的存储都是采用的Unicode编码，所以这个方法返回的是该字符的Unicode编码的十进制值，对于Unicode不是很了解的朋友可以参考我的另外一篇Post&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2010/12/06/1897928.html"&gt;字符编码那些事儿&lt;/a&gt;，如果我需要得到这个字符具体是多少，只需要调用Convert.ToChar就可以了。来看个例子&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
        int a = Console.Read();&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~&lt;/p&gt;
&lt;p&gt;在Console窗口中按Ctrl+空格打开中文输入法，这样可以在Console中输入中文，然后敲随便一个中文，比如’我’,设置断点可以发现运行到第二行的时候变量c的值是’我’,这样基本就告诉我们了其中的一些基本的原理。就想我前面说的Console.Read返回的是’我’这个字符的Unicode编码的值，如果我们输入’3’,那么a并不是3，而是3的Unicode编码的值，也就是51。&lt;/p&gt;
&lt;p&gt;这个51在程序中已经是int类型了，如果我们需要重新得到原始的Char，使用方法Convert.ToChar就可以。&lt;/p&gt;
&lt;p&gt;实际中另外一种情况是，我在Console中输入数字，希望在程序中重新得到数字,这时候，上面的方法就不行了，因为它只能得到char.&lt;/p&gt;
&lt;p&gt;有的朋友可能会说，Convert类中包含了基本类型的转换，直接用不就行了么，的确,Convert类中确实有Convert.ToInt32方法用于将char转换为int,但是，这个转换是基于2进制实际值的转换，也就是说，我将字符’3’放进去，得到的结果是字符’3’的二进制表示的int值，也就是51.&lt;/p&gt;
&lt;p&gt;园子里有的人用的是int.parse的方法，这个方法使用每次必须将char转换成string类型才行，实现是可以实现，但是每次都转换成string
感觉十分的丑陋。&lt;/p&gt;
&lt;p&gt;在文档里面找了一下，发现了这个方法。GetNumericValue，直接提供了char到int的转换，可以将字符’3’直接转换为double类型。&lt;/p&gt;</summary></entry><entry><title>二叉树的非递归遍历</title><link href="http://blog.michaelyin.info/2010/12/23/%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e9%9d%9e%e9%80%92%e5%bd%92%e9%81%8d%e5%8e%86/" rel="alternate"></link><updated>2010-12-23T13:59:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-12-23:2010/12/23/%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e9%9d%9e%e9%80%92%e5%bd%92%e9%81%8d%e5%8e%86/</id><summary type="html">&lt;p&gt;二叉树的遍历如果使用递归调用基本没什么问题，这里主要是讲如何使用非递归方法实现二叉树的遍历。&lt;/p&gt;
&lt;p&gt;由于递归调用程序实际上使用了栈来保存方法中的变量值，在非递归遍历的方法中我们需要基于栈的方法。先来看看这个方法&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
        /// &lt;summary&gt;
        /// 非递归中序遍历二叉树
        /// &lt;/summary&gt;
        /// &lt;param name="root"&gt;&lt;/param&gt;
        static void InOrderTraverse(BinaryTreeNode root)
        {
            BinaryTreeNode temp = root;
            Stack&lt;BinaryTreeNode&gt; stack = new Stack&lt;BinaryTreeNode&gt;();
            stack.Push(root);
            while (stack.Count &amp;gt; 0)
            {
                while (temp != null)
                {
                    temp = temp.left;
                    stack.Push(temp);
                }
                stack.Pop();
                //如果为0证明这时右边节点为null
                if (stack.Count &amp;gt; 0)
                {
                    temp = stack.Pop();
                    Console.WriteLine(temp.data);
                    temp = temp.right;
                    stack.Push(temp);
                }
            }
        }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;节点&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="err"&gt;在这里是起一个标识的作用，首先沿根节点往左下方进行查找，将存在的节点压入栈，里面的那个&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="err"&gt;循环结束后栈的最顶端一定是一个&lt;/span&gt;&lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="err"&gt;，所以栈&lt;/span&gt;&lt;span class="nb"&gt;pop&lt;/span&gt;&lt;span class="err"&gt;一下，然后这时进行读取操作，读取后压入读取节点的右子节点，进入下一个&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="err"&gt;循环，&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="err"&gt;指向右子节点。&lt;/span&gt;

&lt;span class="err"&gt;在这里使用栈能保证左边子节点访问后找到父节点，父节点访问后也弹出栈，将右子节点压入。这里右子节点的压入和前面一部分是对应的，保证&lt;/span&gt;&lt;span class="nx"&gt;stack.Pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;这句语句的正确性。如果我们不想在栈中压入多余的那个&lt;/span&gt;&lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="err"&gt;这时该怎么办呢？将程序改成这样&lt;/span&gt;

&lt;span class="err"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brush&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="na"&gt;-links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="na"&gt;-line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gutter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="na"&gt;-script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ruler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smart&lt;/span&gt;&lt;span class="na"&gt;-tabs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="na"&gt;-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toolbar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// 非递归中序遍历二叉树&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;root&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;InOrderTraverse2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;root.left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack.Count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp.left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stack.Pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="nx"&gt;Console.WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp.data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp.right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只有确定是非null才将节点压入栈，但是这里会有一个问题，当temp指向根节点的右节点的时候，栈是空的，我们需要在while循环处多加一个判断，如果temp是null证明右节点不存在，循环结束。&lt;/p&gt;
&lt;p&gt;到这里，程序基本上已经比较完美了，不过我还是要在这里折腾一下。&lt;/p&gt;
&lt;p&gt;while循环中的while循环的条件是temp是否为null,所以，我可以用一个if/else来换一下&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
        static void InOrderTraverse3(BinaryTreeNode root)
        {
            BinaryTreeNode temp = root.left;
            Stack&lt;BinaryTreeNode&gt; stack = new Stack&lt;BinaryTreeNode&gt;();
            stack.Push(root);
            while (stack.Count &amp;gt; 0 || temp != null)
            {
                if (temp != null)
                {
                    stack.Push(temp);
                    temp = temp.left;
                }
                else
                {
                    temp = stack.Pop();
                    Console.WriteLine(temp.data);
                    temp = temp.right;
                }
            }
        }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;呵呵，有意思吧。编程真奇妙&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="err"&gt;~&lt;/span&gt;

&lt;span class="err"&gt;上面三个都是二叉树的非递归中序遍历方法，非递归先序遍历和中序差不多，开始从上往下把节点入栈的时候对节点进行操作就行了，比如第二个的中序遍历改成先序遍历就是&lt;/span&gt;

&lt;span class="err"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brush&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="na"&gt;-links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="na"&gt;-line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gutter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="na"&gt;-script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ruler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smart&lt;/span&gt;&lt;span class="na"&gt;-tabs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="na"&gt;-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toolbar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// 非递归先序遍历二叉树&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;root&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;PreOrderTraverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;root.left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;Console.WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root.data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack.Count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;Console.WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp.data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp.left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stack.Pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp.right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其他的几种对着中序改一下就行了&lt;/p&gt;
&lt;p&gt;下面来讲一讲后序遍历，后序遍历由于遍历父节点是在遍历子节点之后，而且左节点和右节点遍历后的行为不一样，所以需要用变量来记录前一次访问的节点，根据前一次节点和现在的节点的关系来确定具体执行什么操作&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
        static void PostOrderTraversa1(BinaryTreeNode root)
        {
            Stack&lt;BinaryTreeNode&gt; stack = new Stack&lt;BinaryTreeNode&gt;();
            stack.Push(root);
            BinaryTreeNode prev = null;
            BinaryTreeNode curr = null;
            while (stack.Count &amp;gt; 0)
            {
                curr = stack.Peek();
                if (prev == null || prev.left == curr || prev.right == curr)
                {
                    if (curr.left != null)
                    {
                        stack.Push(curr.left);
                    }
                    else if (curr.right != null)
                    {
                        stack.Push(curr.right);
                    }
                    else
                    {
                        Console.WriteLine(curr.data);
                        stack.Pop();
                    }
                }
                else if (curr.left == prev)
                {
                    if (curr.right != null)
                    {
                        stack.Push(curr.right);
                    }
                    else
                    {
                        Console.WriteLine(curr.data);
                        stack.Pop();
                    }
                }
                else if (curr.right == prev)
                {
                    Console.WriteLine(curr.data);
                    stack.Pop();
                }
                prev = curr;
            }
        }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="err"&gt;这个方法我继续折腾，可以简化成这样&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
        static void PostOrderTraversa2(BinaryTreeNode root)
        {
            Stack&lt;BinaryTreeNode&gt; stack = new Stack&lt;BinaryTreeNode&gt;();
            stack.Push(root);
            BinaryTreeNode prev = null;
            BinaryTreeNode curr = null;
            while (stack.Count &amp;gt; 0)
            {
                curr = stack.Peek();
                if (prev == null || prev.left == curr || prev.right == curr)
                {
                    if (curr.left != null)
                        stack.Push(curr.left);
                    else if (curr.right != null)
                        stack.Push(curr.right);
                }
                else if (curr.left == prev)
                {
                    if (curr.right != null)
                        stack.Push(curr.right);
                }
                else
                {
                    Console.WriteLine(curr.data);
                    stack.Pop();
                }
                prev = curr;
            }
        }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="err"&gt;恩恩，有意思&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
好了，最后来一个压轴的吧。老实说我开始想过这么搞，但是没有想清楚就否定了，后来在网上看到别人这么写才看懂。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="err"&gt;使用双栈来完成后序遍历，看好了，当当当当&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
        /// &lt;summary&gt;
        /// 使用双栈
        /// &lt;/summary&gt;
        /// &lt;param name="root"&gt;&lt;/param&gt;
        static void PostOrderTraversa3(BinaryTreeNode root)
        {
            Stack&lt;BinaryTreeNode&gt; stack = new Stack&lt;BinaryTreeNode&gt;();
            Stack&lt;BinaryTreeNode&gt; output = new Stack&lt;BinaryTreeNode&gt;();
            stack.Push(root);
            BinaryTreeNode curr = null;
            while (stack.Count &amp;gt; 0)
            {
                curr = stack.Pop();
                output.Push(curr);
                if (curr.left != null)
                    stack.Push(curr.left);
                if (curr.right != null)
                    stack.Push(curr.right);
            }
            while (output.Count &amp;gt; 0)
            {
                Console.WriteLine(output.Peek().data);
                output.Pop();
            }
        }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;园子里的二叉树的非递归遍历我看了几个，代码的可读性不是很好，所以学习完了之后进行了一个整理，希望能给园子做点贡献&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="err"&gt;~&lt;/span&gt;
&lt;span class="nb"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;二叉树的非递归遍历&lt;/span&gt;
&lt;span class="kt"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;
&lt;span class="nx"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MichaelYin&lt;/span&gt;
&lt;span class="nx"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;未分类&lt;/span&gt;
&lt;span class="nx"&gt;Slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;e4&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;ba&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;e5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="nb"&gt;f&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;e6&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;e7&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;e9&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="nb"&gt;d&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;e9&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;e5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;bd&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;e9&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="nb"&gt;d&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;e5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;86&lt;/span&gt;

&lt;span class="err"&gt;二叉树的遍历如果使用递归调用基本没什么问题，这里主要是讲如何使用非递归方法实现二叉树的遍历。&lt;/span&gt;

&lt;span class="err"&gt;由于递归调用程序实际上使用了栈来保存方法中的变量值，在非递归遍历的方法中我们需要基于栈的方法。先来看看这个方法&lt;/span&gt;

&lt;span class="err"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brush&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="na"&gt;-links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="na"&gt;-line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gutter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="na"&gt;-script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ruler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smart&lt;/span&gt;&lt;span class="na"&gt;-tabs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="na"&gt;-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toolbar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// 非递归中序遍历二叉树&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;root&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;InOrderTraverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack.Count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp.left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;stack.Pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="c1"&gt;//如果为0证明这时右边节点为null&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack.Count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stack.Pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="nx"&gt;Console.WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp.data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp.right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;节点temp在这里是起一个标识的作用，首先沿根节点往左下方进行查找，将存在的节点压入栈，里面的那个while循环结束后栈的最顶端一定是一个null，所以栈pop一下，然后这时进行读取操作，读取后压入读取节点的右子节点，进入下一个while循环，temp指向右子节点。&lt;/p&gt;
&lt;p&gt;在这里使用栈能保证左边子节点访问后找到父节点，父节点访问后也弹出栈，将右子节点压入。这里右子节点的压入和前面一部分是对应的，保证stack.Pop()这句语句的正确性。如果我们不想在栈中压入多余的那个null这时该怎么办呢？将程序改成这样&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
        /// &lt;summary&gt;
        /// 非递归中序遍历二叉树
        /// &lt;/summary&gt;
        /// &lt;param name="root"&gt;&lt;/param&gt;
        static void InOrderTraverse2(BinaryTreeNode root)
        {
            BinaryTreeNode temp = root.left;
            Stack&lt;BinaryTreeNode&gt; stack = new Stack&lt;BinaryTreeNode&gt;();
            stack.Push(root);
            while (stack.Count &amp;gt; 0 || temp != null)
            {
                while (temp != null)
                {
                    stack.Push(temp);
                    temp = temp.left;
                }
                temp = stack.Pop();
                Console.WriteLine(temp.data);
                temp = temp.right;
            }
        }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;只有确定是非&lt;/span&gt;&lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="err"&gt;才将节点压入栈，但是这里会有一个问题，当&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="err"&gt;指向根节点的右节点的时候，栈是空的，我们需要在&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="err"&gt;循环处多加一个判断，如果&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="err"&gt;是&lt;/span&gt;&lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="err"&gt;证明右节点不存在，循环结束。&lt;/span&gt;

&lt;span class="err"&gt;到这里，程序基本上已经比较完美了，不过我还是要在这里折腾一下。&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="err"&gt;循环中的&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="err"&gt;循环的条件是&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="err"&gt;是否为&lt;/span&gt;&lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;所以，我可以用一个&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="err"&gt;来换一下&lt;/span&gt;

&lt;span class="err"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brush&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="na"&gt;-links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="na"&gt;-line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gutter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="na"&gt;-script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ruler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smart&lt;/span&gt;&lt;span class="na"&gt;-tabs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="na"&gt;-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toolbar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
        &lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;InOrderTraverse3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;root.left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack.Count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp.left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stack.Pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="nx"&gt;Console.WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp.data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp.right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;呵呵，有意思吧。编程真奇妙\~&lt;/p&gt;
&lt;p&gt;上面三个都是二叉树的非递归中序遍历方法，非递归先序遍历和中序差不多，开始从上往下把节点入栈的时候对节点进行操作就行了，比如第二个的中序遍历改成先序遍历就是&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
        /// &lt;summary&gt;
        /// 非递归先序遍历二叉树
        /// &lt;/summary&gt;
        /// &lt;param name="root"&gt;&lt;/param&gt;
        static void PreOrderTraverse(BinaryTreeNode root)
        {
            BinaryTreeNode temp = root.left;
            Stack&lt;BinaryTreeNode&gt; stack = new Stack&lt;BinaryTreeNode&gt;();
            Console.WriteLine(root.data);
            stack.Push(root);
            while (stack.Count &amp;gt; 0 || temp != null)
            {
                while (temp != null)
                {
                    Console.WriteLine(temp.data);
                    stack.Push(temp);
                    temp = temp.left;
                }
                temp = stack.Pop();
                temp = temp.right;
            }
        }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;其他的几种对着中序改一下就行了&lt;/span&gt;

&lt;span class="err"&gt;下面来讲一讲后序遍历，后序遍历由于遍历父节点是在遍历子节点之后，而且左节点和右节点遍历后的行为不一样，所以需要用变量来记录前一次访问的节点，根据前一次节点和现在的节点的关系来确定具体执行什么操作&lt;/span&gt;

&lt;span class="err"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brush&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="na"&gt;-links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="na"&gt;-line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gutter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="na"&gt;-script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ruler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smart&lt;/span&gt;&lt;span class="na"&gt;-tabs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="na"&gt;-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toolbar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
        &lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;PostOrderTraversa1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack.Count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stack.Peek&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;prev.left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;prev.right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;Console.WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="nx"&gt;stack.Pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;Console.WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="nx"&gt;stack.Pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;Console.WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="nx"&gt;stack.Pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
这个方法我继续折腾，可以简化成这样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brush&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="na"&gt;-links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="na"&gt;-line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gutter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="na"&gt;-script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ruler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smart&lt;/span&gt;&lt;span class="na"&gt;-tabs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="na"&gt;-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toolbar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
        &lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;PostOrderTraversa2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack.Count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stack.Peek&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;prev.left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;prev.right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;Console.WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="nx"&gt;stack.Pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
恩恩，有意思~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="err"&gt;好了，最后来一个压轴的吧。老实说我开始想过这么搞，但是没有想清楚就否定了，后来在网上看到别人这么写才看懂。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
使用双栈来完成后序遍历，看好了，当当当当~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brush&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="na"&gt;-links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="na"&gt;-line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gutter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="na"&gt;-script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ruler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smart&lt;/span&gt;&lt;span class="na"&gt;-tabs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="na"&gt;-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toolbar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// 使用双栈&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;root&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;PostOrderTraversa3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack.Count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stack.Pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="nx"&gt;output.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nx"&gt;stack.Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr.right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output.Count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;Console.WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output.Peek&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;output.Pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;园子里的二叉树的非递归遍历我看了几个，代码的可读性不是很好，所以学习完了之后进行了一个整理，希望能给园子做点贡献\~&lt;/p&gt;</summary></entry><entry><title>算法学习之快速排序</title><link href="http://blog.michaelyin.info/2010/12/20/%e7%ae%97%e6%b3%95%e5%ad%a6%e4%b9%a0%e4%b9%8b%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f/" rel="alternate"></link><updated>2010-12-20T14:01:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-12-20:2010/12/20/%e7%ae%97%e6%b3%95%e5%ad%a6%e4%b9%a0%e4%b9%8b%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f/</id><summary type="html">&lt;p&gt;快速排序通常是用于排序的最佳实用选择，因为它的平均性能相当好。&lt;/p&gt;
&lt;p&gt;快速排序和先前讲到的合并排序一样，体现了算法设计中的分治的思想。我们首先将问题进行分解，将数组划分成两个部分A[p…q-1]和A[q+1…r]，使得A[p…q-1]中的元素小于等于A[q]，然后分别解决前面一个数组和后面一个数组的排序，最后进行合并，由于这两个数组是就地排序(in
place)的，所以不用像合并排序中一样进行过多的合并的操作。&lt;/p&gt;
&lt;p&gt;由于中间的分别排序的部分可以使用递归实现，所以快速排序中关键的地方就是如何将数组进行分解了。&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
        /// &lt;summary&gt;
        /// 对数组进行分组,返回分界处的index
        /// &lt;/summary&gt;
        public static int Partition(int[] array, int firstIndex, int secIndex)
        {
            int key = array[secIndex];
            int k = firstIndex;
            for (int j = firstIndex; j &amp;lt; secIndex; j++)
            {
                if (array[j] &amp;lt; key)
                {
                    Utils.Swap(ref array[k], ref array[j]);
                    k++;
                }
            }
            //将最后一个元素和对应的分解出的元素互换
            Utils.Swap(ref  array[k], ref array[secIndex]);
            return k;
        }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;先将最后一位的值取出来作为比较的&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;左边全部是小于&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="err"&gt;的值，由于开始还没有比较，所以&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="n"&gt;firstIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;如果发现有小于&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="err"&gt;的值就和&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="err"&gt;指向的数进行替换，并且&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;值加&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;，最后的情况就是&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;左边的值就都比&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="err"&gt;小，最后一行的&lt;/span&gt;&lt;span class="n"&gt;Utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;secIndex&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="err"&gt;将含有&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="err"&gt;的值移到了中间，这样就实现了拆分数组并且前面小于等于&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;的值。下面是快速排序的代码&lt;/span&gt;

&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;firstIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;secIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;secIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomPartition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;firstIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;//递归调用&lt;/span&gt;
                &lt;span class="n"&gt;Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;firstIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面就快速排序还顺带讲一点随机化的知识，虽然我们假定输入数据的所有排列顺序都是等可能的，但是在实际工程中，这个假设不一定总是成立，所以，我们需要在算法中人为的加入随机化成分，&lt;font color="#ff0000"&gt;以便对于所有输入，它能获得较好的平均情况性能&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
        public static int RandomPartition(int[] array, int firstIndex, int secIndex)
        {
            //从中随机选出一个index,然后和最后一个元素互换
            int j = RandomFactory.GetRandomInt(firstIndex, secIndex);
            Utils.Swap(ref array[j], ref array[secIndex]);
            return Partition(array, firstIndex, secIndex);
        }
~~~~&lt;/p&gt;
&lt;p&gt;原理其实很简单，就是在分解之前随机的从数组中选取一个数和最后一个元素互换，这样的本质就是数组中的任何一个元素都有可能作比较的那个Key。&lt;/p&gt;</summary></entry><entry><title>由类能否包含自己说开去</title><link href="http://blog.michaelyin.info/2010/12/13/%e7%94%b1%e7%b1%bb%e8%83%bd%e5%90%a6%e5%8c%85%e5%90%ab%e8%87%aa%e5%b7%b1%e8%af%b4%e5%bc%80%e5%8e%bb/" rel="alternate"></link><updated>2010-12-13T08:47:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-12-13:2010/12/13/%e7%94%b1%e7%b1%bb%e8%83%bd%e5%90%a6%e5%8c%85%e5%90%ab%e8%87%aa%e5%b7%b1%e8%af%b4%e5%bc%80%e5%8e%bb/</id><summary type="html">&lt;p&gt;下午在Coding的时候突然想到了一个问题，类到底能不能包含自己?在什么情况下能包自己？&lt;/p&gt;
&lt;p&gt;当时正在实现一个类似链表的功能，在一个节点中需要有下个节点的引用的数据，比如像这样子的代码。&lt;/p&gt;
&lt;p Next_="Next;
" Node="Node" _="
" data_="data;
" int="int" public="public"&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
    public class Node&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;在&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="err"&gt;中有一个&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="err"&gt;类型的引用地址，用来找到这个节点的下一个节点。默认构造函数调用后会将&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="err"&gt;置&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="err"&gt;置&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;当时我写到这里突然想起来好像在哪里看到过类中包含类自己是不行的。于是在&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="err"&gt;中跑了一遍，运行结果是对的。断点显示初始化的值是我预计的结果。那到底在什么情况下类不能包含自己呢？要知道答案，我们还是先要说说初始化背后的故事。&lt;/span&gt;

&lt;span class="err"&gt;在我初始化节点的时候我调用的是&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;这个方法，这个时候&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="err"&gt;会首先计算类中成员需要的内存空间，这里就是&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="err"&gt;类型和&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="err"&gt;引用类型的地址的空间&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;实际还有别的，不过和我们讨论的问题无关，故在这里省略&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;，然后在内存中分配内存空间，分配了内存空间后就会对类中的变量进行初始化，比如我的代码中写的是&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;那么&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="err"&gt;这个变量就会在这时被赋值&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;就变量初始化后然后会调用类的相应的构造函数，因为我这里没有实现构造函数，所以最后的值就是&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="err"&gt;的值为&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="err"&gt;的值为&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;引用类型的默认初始化值都是&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="err"&gt;到这里我们已经把类的初始化过程弄的比较清楚了，现在要做的就是如何改变代码使程序异常。我们把注意力放到&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;
&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;这一句上，这里我没有加&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="err"&gt;这个方法，所以&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="err"&gt;的值为&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;，现在我们在后面把初始化类的代码加上。就像这样&lt;/span&gt;

&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;       
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;好了，现在让我们来想一下Next这个地方的值是怎么样的，data置0后，new
Node需要返回给Next一个内存中的地址，所以它需要再次运行类的初始化的代码，在内存中重新开辟区域，给data置0,然后里面显然也有一个Node类型的引用，当给data赋值后，我也需要给那个Next赋值，然后又需要在内存中开辟区域。这样永无止境，直到内存耗而报错。&lt;/p&gt;
&lt;p&gt;到这里关于类能否包含自己相信我们已经找到了答案了。另外需要在提的一点就是如果类中的自己是静态变量呢？静态变量是属于类级别的，它的初始化是在类初始化的时候，如果没有调用构造函数，变量置null,如果调用了构造函数，则按构造函数进行初始化。如果构造函数中出现了上面的这种情况，一样的会报异常。&lt;/p&gt;
&lt;p&gt;类中能否包含自己听来多是一种经验，但是如果你真正弄清楚了里面的过程以及为什么为异常的原因，相信你犯错的机会会小的多。&lt;/p&gt;</summary></entry><entry><title>算法排序之堆排序</title><link href="http://blog.michaelyin.info/2010/12/08/%e7%ae%97%e6%b3%95%e6%8e%92%e5%ba%8f%e4%b9%8b%e5%a0%86%e6%8e%92%e5%ba%8f/" rel="alternate"></link><updated>2010-12-08T15:06:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-12-08:2010/12/08/%e7%ae%97%e6%b3%95%e6%8e%92%e5%ba%8f%e4%b9%8b%e5%a0%86%e6%8e%92%e5%ba%8f/</id><summary type="html">&lt;p&gt;堆排序的重点在于对堆的理解，首先堆是一种数组对象，同时，它也可以被视为一棵完全二叉树，树中的每个节点从上到下，从左到右和数组中的每个元素是一一对应的，二叉树的每一层都是填满的，除了最后一层以外。&lt;/p&gt;
&lt;p&gt;比如数组中的第一个元素就是二叉树的根节点，第二个就是元素就是根节点的左边的子节点，而第三个节点就是根节点的右边的子节点，然后第四个节点就是根节点的左边的子节点的左边的子节点，这样以此类推。&lt;/p&gt;
&lt;p&gt;通过给定的节点的数组下标，我们可以求出该节点的左边子节点的坐标和右边子节点的坐标。&lt;/p&gt;
&lt;p 1_="1;
" _="+" _2="(2" parent_="parent)" return="return"&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
        public static int Left(int parent)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;堆有两种，一种是最大堆，一种是最小堆，最大堆的性质就是每个母节点都比它的子节点大，最小堆的性质则相反。我们这里的排序就用最大堆来排序。&lt;/span&gt;

&lt;span class="nx"&gt;Heapify&lt;/span&gt;&lt;span class="err"&gt;这个方法用来保持最大堆的母节点总是比子节点大这个特性，将数组坐标&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;
&lt;span class="err"&gt;和数组输入，它从母节点&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;
&lt;span class="err"&gt;处开始比较，如果发现子节点比母节点大，那么就会让母节点下降，下降的母节点还有可能比下面的节点大，所以又进行比较。方法执行完之后，可以保证以&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;
&lt;span class="err"&gt;为根节点的子树成为最大堆。关于这个方法有两种实现方式，递归和循环调用，我都写出来了，大家可以都看一下。&lt;/span&gt;

&lt;span class="err"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brush&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="na"&gt;-links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="na"&gt;-line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gutter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="na"&gt;-script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ruler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smart&lt;/span&gt;&lt;span class="na"&gt;-tabs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="na"&gt;-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toolbar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// 保证最大堆的性质，采用递归方法实现&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;arrayToSort&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;index&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;static&lt;/span&gt; &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;HeapifyType1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; arrayToSort, int index)
        {
            int leftIndex = HeapSort.Left(index);
            int rightIndex = HeapSort.Right(index);
            //先假设父节点最大，然后进行比较
            int largestIndex = index;
            if (leftIndex &lt;span class="nt"&gt;&amp;lt; HeapSort.HeapSize&lt;/span&gt; &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="err"&gt;arrayToSort&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; arrayToSort&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;largestIndex&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)
                largestIndex = leftIndex;
            if (rightIndex &lt;span class="nt"&gt;&amp;lt; HeapSort.HeapSize&lt;/span&gt; &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="err"&gt;arrayToSort&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; arrayToSort&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;largestIndex&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)
                largestIndex = rightIndex;
            //判断是否需要朝下继续生成堆
            if (largestIndex != index)
            {
                //调换位置
                Utils.Swap(ref arrayToSort&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;index&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;, ref arrayToSort&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;largestIndex&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;);
                HeapSort.HeapifyType1(arrayToSort, largestIndex);
            }
        }

        /// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        /// 保证最大堆的性质，采用迭代方法实现,功能和前面一样
        /// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        /// &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;arrayToSort&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        /// &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        public static void HeapifyType2(int&lt;span class="cp"&gt;[]&lt;/span&gt; arrayToSort, int index)
        {
            int outIndex = index;
            while (true)
            {
                int leftIndex = HeapSort.Left(outIndex);
                int rightIndex = HeapSort.Right(outIndex);
                //先假设父节点最大，然后进行比较
                int largestIndex = outIndex;
                if (leftIndex &lt;span class="nt"&gt;&amp;lt; HeapSort.HeapSize&lt;/span&gt; &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="err"&gt;arrayToSort&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; arrayToSort&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;largestIndex&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)
                    largestIndex = leftIndex;
                if (rightIndex &lt;span class="nt"&gt;&amp;lt; HeapSort.HeapSize&lt;/span&gt; &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="err"&gt;arrayToSort&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; arrayToSort&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;largestIndex&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)
                    largestIndex = rightIndex;
                //判断是否需要朝下继续生成堆
                if (largestIndex != outIndex)
                {
                    //调换位置
                    Utils.Swap(ref arrayToSort&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;outIndex&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;, ref arrayToSort&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;largestIndex&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;);
                    //调整节点index
                    outIndex = largestIndex;
                }
                else
                {
                    break;
                }
            }
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在开始排序之前，我们需要先把最大堆建立起来，如何建立最大堆呢，我们从底层往上调用Hepify方法，由于底层确定了每一次选出来的是最大值，那么上一层的方法在这个基础上才会执行正确。&lt;font color="#ff0000"&gt;因为一个a[n]的数组，其中后面一半肯定是叶子节点&lt;/font&gt;，这可以看成一个性质，叶子节点可以看成是只含一个元素的堆。知道了这些，就不难理解我们通过Heapify将最大堆建立起来的原理了。&lt;/p&gt;
&lt;p -1_="-1;" 2_="2;" HeapSort.HeapSize="HeapSort.HeapSize" HeapifyType1_arrayToSort_="HeapifyType1(arrayToSort," _="&amp;gt;" _arrayToSort.Length_="(arrayToSort.Length)" _int="(int" arrayToSort.Length_="arrayToSort.Length;
" for="for" i="i" i--_="i--)
" i_="i);
"&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
        public static void BuildHeap(int[] arrayToSort)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;另外需要说明的一点是，&lt;/span&gt;&lt;span class="n"&gt;HeapSize&lt;/span&gt;&lt;span class="err"&gt;这个变量表示的是&lt;/span&gt;&lt;span class="n"&gt;Heap&lt;/span&gt;&lt;span class="err"&gt;的大小，因为我们维护的堆在开始和数组的长度是相等的，但后后来会小于数组的长度，&lt;/span&gt;

&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;HeapSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面就是排序的过程了，我们通过前面提到的BuildHeap方法将最大堆建立起来后，显而易见根节点就是最大值，然后将根节点和后面的元素进行互换，并减小HeapSize，这样就不会考虑那些已经剔除的最大值，和最大值互换的叶子节点的值显然不一定比后来的子节点大，所以调用Heapify重新选出最大值。然后循环这个过程，最终完成数组的排序。&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
        public static void Sort(int[] arrayToSort)
        {
            HeapSort.BuildHeap(arrayToSort);
            for (int i = arrayToSort.Length - 1; i &amp;gt; 0; i--)
            {
                Utils.Swap(ref arrayToSort[i], ref arrayToSort[0]);
                HeapSort.HeapSize--;
                HeapSort.HeapifyType1(arrayToSort, 0);
            }
        }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="err"&gt;堆排序其实主要就是一个维护堆的过程，始终保持每一个母节点比子节点大这个性质。优先级队列的实现用堆是比较合适的。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>字符编码那些事儿</title><link href="http://blog.michaelyin.info/2010/12/06/%e5%ad%97%e7%ac%a6%e7%bc%96%e7%a0%81%e9%82%a3%e4%ba%9b%e4%ba%8b%e5%84%bf/" rel="alternate"></link><updated>2010-12-06T08:57:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-12-06:2010/12/06/%e5%ad%97%e7%ac%a6%e7%bc%96%e7%a0%81%e9%82%a3%e4%ba%9b%e4%ba%8b%e5%84%bf/</id><summary type="html">&lt;p&gt;这几天专门花时间好好看了下字符编码的东西，在这里写篇随笔把知识好好梳理一下。&lt;/p&gt;
&lt;p&gt;讲到字符编码，还是从最基本的ASCII讲起咯。&lt;/p&gt;
&lt;p&gt;在计算机刚开始使用时候，人们必须用计算机里面的01这样的二进制组合来表示一些基本的英文字母和字符,当然了，每个人都可以有自己的一套编码标准来完成这个看似简单的功能，不过，为了不同的计算机系统之间能够相互通信而不产生混乱，那么所有的计算机就必须采用相同的编码标准，所以美国的标准化组织就出台了ASCII编码标准，统一规定了上述符号和字母用哪些二进制来表示。在这里要加的一点是，标准ASCII只用了7位，最前面的一位是用来做奇偶校验的。比如英文字母a在ASCII编码中用二进制01100001表示，十六进制就是61.&lt;/p&gt;
&lt;p&gt;使用了ASCII编码后，原本的问题得到了很好的解决。但是，这里又有了新的问题，它并不能对其他非英语国家有很好的支持。比如，我如何编码汉字，日本文字，朝鲜文字，阿拉伯语，还有俄罗斯语等等。由于汉字这样的文字数目较多，用一个Byte(也就是8
bit)来提供编码方案显然是不现实的，这时，双字节字符集（DBCS：double-byte
character set）就出现了，它的出现就是为了解决刚刚说到的这个问题的。&lt;/p&gt;
&lt;p&gt;先来解释下什么是DBCS,DBCS简单的说就是使用两个Byte来表示一个字符，而且DBCS的最初的还是ASCII代码，所以说DBCS是兼容ASCII的。而且它表示ASCII只用了一个Byte,这里说一个问题，假设给了你一连串的Byte数组，你解码的时候如何知道这个Byte的解码需要用到他的下一个Byte呢？这里需要看前一个Byte的最高位，也就是最左边的那个bit,前面已经说过，ASCII只用了7位，如果最高位不用来做奇偶校验的话，那么最高位其实是0,DBCS中的前面的一个Byte的最高位如果为1的话，那么我就可以知道这个字符的解码需要用到后面一个Byte.&lt;/p&gt;
&lt;p&gt;不同的国家都有一套自己国家的字符的DBCS的解决方案，比如中国字符集就是GB2312，日本是shift_jis，韩国是ks_c_5601-1987，由于出现了不同的字符集，所以这里又出现了另外一个问题，两个Byte在不同的字符集中代表的字符是不一样的，所以计算机在跨语言通信时很麻烦。&lt;/p&gt;
&lt;p&gt;这里还需要另外提到的一点是，上面提到的DBCS其实都是对于一种叫做ANSI编码的扩展，也就是说其实上面提到的那几种DBCS都是ANSI编码，只不过在简体中文操作系统中，ANSI
编码代表 GB2312 编码，在日文操作系统下，ANSI 编码代表 JIS
编码。这样也就告诉我们，其实在简体中文windows的记事本里面，保存选项中的ANSI其实也就是GB2312
的意思。&lt;/p&gt;
&lt;p&gt;上面说到了DBCS跨语言的困难之处，人们也希望能够解决这个问题。这时候Unicode编码方式的出现比较好的解决了这个问题。Unicode编码采用两个Byte来统一表示世界上所有的字符，也就是说，能被Unicode表示的字符二进制都是表示都是不一样的。这样带来的好处是显而易见的，统一采用Unicode编码，我们可以在一段文本中存储中文，日文，韩文。&lt;/p&gt;
&lt;p&gt;Unicode的前128位仍然是ASCII码，只不过是在后面加了一个全部是0的Byte。比如a在ASCII码中是01100001，在Unicode中就是01100001
00000000。&lt;/p&gt;
&lt;p&gt;实用中见到Unicode的频率其实没有UTF-8的频率高，下面来讲讲UTF-8.&lt;/p&gt;
&lt;p&gt;还是回想刚刚那个问题，Unicode用两个Byte来表示ASCII中已经支持的字符，仅仅是在后面加了一个全是0的Byte,那些只需要用到ASCII字符的国家当然不爽了，因为使用Unicode编码在网络传输或者文本存储中意味着相比于ASCII编码我需要多出一倍的流量。刚刚才看的新闻，一个女士在俄罗斯用手机更新了下新浪微博，结果用了3000多的花费，这年头，流量值钱啊！！&lt;/p&gt;
&lt;p&gt;因为Unicode仅仅是编码标准，而并没有指定传输过程中以什么方式进行存储和传输，换句话说，我们可以对其进行一番加工，只要最后查询字符的时候查的是Unicode的字符表就行了。&lt;/p&gt;
&lt;p&gt;可以把UTF看成一个中间格式的字符集，它支持多国语言，同时对于ASCII中的字符做了优化，对于ASCII中的字符在传输和存储的时候只需要一个Byte,大大节省了磁盘空间和网络流量。不过对于中文字符，一般是需要三个Byte来传输和存储，反而增加了空间和流量。关于UTF-8和Unicode具体的转换这里就不做具体的阐述，有兴趣的朋友自己去找相关资料，我觉得一般的IT人士了解到这之间的联系就不错了。&lt;/p&gt;
&lt;p&gt;下面来讲讲BOM，我们可以采用上述的多种编码方式来存储一段文字到txt文件中去，这是没有问题的，但是当我们需要读取这段文本的时候，麻烦就来了，因为我们不知道txt中的文本是采用的何种编码方式，如果没有采用正确的编码方式，乱码就会产生，BOM就是用来做这个事情的。我们将一段文字存储到txt中区，然后用十六进制编辑器打开，就可以看到这里面的细节。EF
BB
BF开头的txt文件表示文件采用了UTF-8，FEFF采用的是Big-Endian，如果没有BOM则系统会用默认的ANSI方式打开。&lt;/p&gt;
&lt;p&gt;我尽量将字符编码之间的联系和区别讲清楚，注重原理而忽略了部分实现的具体的细节，有兴趣的朋友可以自己用16进制的编辑器自己去探索一下，如有疑问和错误，欢迎大家指出。。&lt;/p&gt;
&lt;p&gt;最后，推荐几篇我觉得不错的文章&lt;a href="http://www.cnblogs.com/tsoukw/archive/2006/07/13/449861.html"&gt;编码,charset,乱码,unicode,utf-8与net简单释义(续)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tsoukw.cnblogs.com/archive/2006/07/13/449588.html"&gt;编码,charset,乱码,unicode,utf-8与net简单释义&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>BlogEngine中的BlogSettings</title><link href="http://blog.michaelyin.info/2010/11/26/blogengine%e4%b8%ad%e7%9a%84blogsettings/" rel="alternate"></link><updated>2010-11-26T12:44:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-11-26:2010/11/26/blogengine%e4%b8%ad%e7%9a%84blogsettings/</id><summary type="html">&lt;p&gt;BlogEngine中的BlogSettings这个类是用来提供整个系统的设置参数的，参数的读取采用的是反射获取属性名称，然后遍历进行赋值，个人觉得这段代码值得学习&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
private void Load()
        {
            Type settingsType = this.GetType();&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="c1"&gt;//------------------------------------------------------------&lt;/span&gt;
        &lt;span class="c1"&gt;//  Enumerate through individual settings nodes&lt;/span&gt;
        &lt;span class="c1"&gt;//------------------------------------------------------------&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Collections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Specialized&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringDictionary&lt;/span&gt; &lt;span class="n"&gt;dic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Providers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlogService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadSettings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//------------------------------------------------------------&lt;/span&gt;
            &lt;span class="c1"&gt;//  Extract the setting&amp;#39;s name/value pair&lt;/span&gt;
            &lt;span class="c1"&gt;//------------------------------------------------------------&lt;/span&gt;
            &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

            &lt;span class="c1"&gt;//------------------------------------------------------------&lt;/span&gt;
            &lt;span class="c1"&gt;//  Enumerate through public properties of this instance&lt;/span&gt;
            &lt;span class="c1"&gt;//------------------------------------------------------------&lt;/span&gt;
            &lt;span class="n"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PropertyInfo&lt;/span&gt; &lt;span class="n"&gt;propertyInformation&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;settingsType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetProperties&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//------------------------------------------------------------&lt;/span&gt;
                &lt;span class="c1"&gt;//  Determine if configured setting matches current setting based on name&lt;/span&gt;
                &lt;span class="c1"&gt;//------------------------------------------------------------&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propertyInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StringComparison&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;//------------------------------------------------------------&lt;/span&gt;
                    &lt;span class="c1"&gt;//  Attempt to apply configured setting&lt;/span&gt;
                    &lt;span class="c1"&gt;//------------------------------------------------------------&lt;/span&gt;
                    &lt;span class="n"&gt;try&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propertyInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CanWrite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="n"&gt;propertyInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChangeType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;propertyInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PropertyType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CultureInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentCulture&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="n"&gt;catch&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// TODO: Log exception to a common logging framework?&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;StorageLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Providers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlogService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetStorageLocation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;在&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="err"&gt;中对配置进行修改了以后，修改的是&lt;/span&gt;&lt;span class="n"&gt;BlogEngine&lt;/span&gt;&lt;span class="err"&gt;中的那个唯一的对象，然后调用&lt;/span&gt;&lt;span class="n"&gt;Save&lt;/span&gt;&lt;span class="err"&gt;方法通过反射重新生成一个&lt;/span&gt;&lt;span class="n"&gt;StringDictionary&lt;/span&gt;&lt;span class="err"&gt;然后将里面的数据存储数据库中完成对系统参数的修改。&lt;/span&gt;

&lt;span class="err"&gt;另外一个就是它采用了单例模式这个设计模式，借着这个机会好好学习了下，这里推荐两篇个人觉得很不错的文章&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;单件模式&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.cnblogs.com/Terrylee/archive/2005/12/09/293509.html)和这篇[单例模式（Singleton）](http://www.cnblogs.com/qinbaobei/archive/2010/05/07/1729376.html)，当然看完了以后可能也会和我一样产生一些疑问。比如说为什么BlogSettings没有考虑多线程的问题？它里面的代码直接就是&lt;/span&gt;

&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
      &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;BlogSettings&lt;/span&gt; &lt;span class="n"&gt;Instance&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;get&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blogSettingsSingleton&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;blogSettingsSingleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BlogSettings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;blogSettingsSingleton&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外一个问题就是我在Bugnet系列的&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2010/07/25/1784803.html"&gt;一篇文章&lt;/a&gt;中提到的是否必须一定要用单例模式的问题，Bugnet对于DAL层采用了单例模式的实现方式，当时我并不知道Bugnet
里的那个用法就是单例模式，当时就是觉得为什么不直接写成静态方法调用呢？那样也没什么问题，而且看的不是也很清楚么。到网上搜了一下，感觉大家也是各有说法，比如这个&lt;a href="http://www.javaeye.com/topic/8400"&gt;Javaeye讨论帖&lt;/a&gt;，再比如这个&lt;a href="http://topic.csdn.net/t/20040823/11/3300427.html"&gt;CSDN的讨论帖&lt;/a&gt;其中分歧在于大家对于需不需要完全OO的观点，有的人觉得静态方法对于OO来说实现方式太过于丑陋，而有的说做的事情本质其实差不多，一定要追求OO么？&lt;/p&gt;
&lt;p&gt;虽然后来决定以后类似的情况用单例模式来做，但是如果你问我以前我问的那个问题，我自己说实话也不能说服我自己，希望有朝一日自己能基于自己的经验提出自己的看法。&lt;/p&gt;</summary></entry><entry><title>MSchart与Zedgraph使用初探及比较</title><link href="http://blog.michaelyin.info/2010/11/25/mschart%e4%b8%8ezedgraph%e4%bd%bf%e7%94%a8%e5%88%9d%e6%8e%a2%e5%8f%8a%e6%af%94%e8%be%83/" rel="alternate"></link><updated>2010-11-25T01:59:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-11-25:2010/11/25/mschart%e4%b8%8ezedgraph%e4%bd%bf%e7%94%a8%e5%88%9d%e6%8e%a2%e5%8f%8a%e6%af%94%e8%be%83/</id><summary type="html">&lt;p&gt;最近项目中的统计图表功能需要重新进行下调整，所以这两天花时间学习了下关于统计图表方面的东西。&lt;/p&gt;
&lt;p&gt;统计图表的实现方式常用的有Flash方式和图片方式，我这两天主要是把MsChart和Zedgraph研究了一下，简单说下MSchart，这个图表解决方案是微软官方提供的图表解决方案，使用的时候需要.Net3.5
Sp1（在一篇文章的评论中看到有人说.net2.0中也能用，只是需要把需要用到的dll手动加到bin文件夹中去），然后需要安装一个文件，也就是把几个需要用到的dll放到机器里面去。然后有一个安装文件在你的VS中安装控件，这样你就可以通过拖拉的方式直接在项目中使用mschart，需要注意的是在拖拉控件的同时它会修改你的Web.Config文件，当然了，如果你不想在toolbox中加入控件，也可以不安装VS控件，直接在项目中编码的方式来使用就行了，在重复一遍，Mschart.exe那个是必须要装的。如果你想进一步了解Mschart的使用，微软网站上有一个关于这个控件使用的样例项目，里面关于这个控件的例子已经写的很全面了。&lt;/p&gt;
&lt;p&gt;相比于Zedgraph，Mschart对前台声明式的编程支持的更好，很多东西都可以通过在前台声明来控制。Chart这个标记代表了整个控件，Legends这个标记是整个Chart的说明，Series代表Chart中的一连串数据，比如折线图中的一连串数据点就是一个Series，你可以向里面插入Points这个对象，来完成数据的绑定。ChartArea是作图区域，一个Chart控件中可以有几个ChartArea,比如如果有两个ChartArea的话生成的图就会有两个图表，AxisY和AxisX下提供了基本的控制样式的属性.&lt;/p&gt;
&lt;p&gt;Mschart支持多种数据源的绑定，而且和.Net本身的结合的夜更紧密，比如&lt;/p&gt;
&lt;p&gt;Chart1.Series["Series1"].Points.DataBindXY(myReader, "TimeDetail",
myReader, "Temperature");&lt;/p&gt;
&lt;p&gt;这句代码就是直接通过一个DataReader绑定到Chart控件中，你只需要指定DataReader和字段值，然后数据就会自己绑定到mschart上去，坐标轴的间距都可以自己根据具体的数据生成，你也可以通过编程手动的来制定左边的最小，最大值，以及坐标的间距，这些在我前面提到的样例代码中都有，有兴趣的可以自己去看。&lt;/p&gt;
&lt;p&gt;Mschart使用过程中发现的唯一有点点不爽的就是它的中间的线默认是画上去的，也就是那个Gridline,如果你的背景是纯色的还好，将颜色设置成一样就没事了，如果是渐变的背景，就没有办法找到合适的方法，只能把颜色调的淡一点，不过效果始终不是太好看。&lt;/p&gt;
&lt;p&gt;在来说说Zedgraph，这个控件以前在我看的bugnet中作者使用它来生成统计图表信息，当时也没多做了解，这几天花时间看了下，这个控件整体思路和Mschart其实差不多，都是后台动态绑定数据生成图片然后显示到页面上面，由于项目不是大批量的访问，所以性能方面我也没有作过多的分析和了解。&lt;/p&gt;
&lt;p&gt;它主要是通过后台编程来实现功能，不像Mschart很多可以通过声明来实现，MasterPane是一个主要的作图的pane,它是一个容器类，里面装着若干个GraphPane，这个GraphPane其实就和mschart中的ChartArea差不多，都是一个一个的小图，你还可以对MasterPane进行排列，管理图表的排列情况，PointPairList是数据容器，x轴和y轴对应的数据就装在这个里面然后进行绑定。调用的时候，对于Zedgraph需要将方法注册到控件的RenderGraph事件中去。&lt;/p&gt;
&lt;p&gt;总体来说实现效果和mschart其实差不多，只不过个人感觉Mschart好看一点点，而ZedGraph显得简练一些。&lt;/p&gt;</summary></entry><entry><title>Subsonic查询中奇怪的数据丢失问题</title><link href="http://blog.michaelyin.info/2010/11/09/subsonic%e6%9f%a5%e8%af%a2%e4%b8%ad%e5%a5%87%e6%80%aa%e7%9a%84%e6%95%b0%e6%8d%ae%e4%b8%a2%e5%a4%b1%e9%97%ae%e9%a2%98/" rel="alternate"></link><updated>2010-11-09T09:43:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-11-09:2010/11/09/subsonic%e6%9f%a5%e8%af%a2%e4%b8%ad%e5%a5%87%e6%80%aa%e7%9a%84%e6%95%b0%e6%8d%ae%e4%b8%a2%e5%a4%b1%e9%97%ae%e9%a2%98/</id><summary type="html">&lt;p&gt;昨天在项目中遇到了一个很奇怪的问题，用Subsonic查询出来的对象中部分字段值出现了丢失，比如我写这样一个查询语句&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
ViewIceCalculate objViewIce = new Select().Top("1").From&lt;ViewIceCalculate&gt;().ExecuteSingle&lt;ViewIceCalculate&gt;();&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;后面的查询跟&lt;/span&gt;&lt;span class="n"&gt;Sql&lt;/span&gt;&lt;span class="err"&gt;语句差不多的，返回一个对象，但是从程序&lt;/span&gt;&lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="err"&gt;中来看的话，有些属性并没有取到值，这个有点奇怪的现象引起了我的兴趣，在网上找了一下，找到了对应的源码，将&lt;/span&gt;&lt;span class="n"&gt;SubSonic&lt;/span&gt;
&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="err"&gt;加载到我实验的&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="err"&gt;的&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="err"&gt;中去，查询中所调用的东西都在里面。&lt;/span&gt;

&lt;span class="err"&gt;然后再&lt;/span&gt;&lt;span class="n"&gt;Subsonic&lt;/span&gt;&lt;span class="err"&gt;中去看了一下，由于是从&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="err"&gt;开始的查询&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;所以先看看&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="err"&gt;这个类把，发现&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="err"&gt;这个类继承自&lt;/span&gt;&lt;span class="n"&gt;SqlQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;又跑到&lt;/span&gt;&lt;span class="n"&gt;SqlQuery&lt;/span&gt;&lt;span class="err"&gt;这个类中一窥究竟。在&lt;/span&gt;&lt;span class="n"&gt;SqlQuery&lt;/span&gt;&lt;span class="err"&gt;我没有看到&lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;不过发现了一个名叫&lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="err"&gt;的方法，看来有戏啊，继续发现之旅。。。看看这里里面有没有&lt;/span&gt;&lt;span class="n"&gt;ExecuteSingle&lt;/span&gt;&lt;span class="err"&gt;，结果还真有，一路找寻，找到了一个叫&lt;/span&gt;&lt;span class="n"&gt;BuildSqlStatement&lt;/span&gt;&lt;span class="err"&gt;的方法，看样子&lt;/span&gt;&lt;span class="n"&gt;Sql&lt;/span&gt;&lt;span class="err"&gt;语句的拼凑是在这里完成的，果断设断点，然后启动调试，到这里将生成的&lt;/span&gt;&lt;span class="n"&gt;Sql&lt;/span&gt;&lt;span class="err"&gt;语句贴到&lt;/span&gt;&lt;span class="n"&gt;SQl&lt;/span&gt;&lt;span class="err"&gt;中运行，数据是可以全部查出来的，那么问题就不出在这里了。。&lt;/span&gt;

&lt;span class="err"&gt;数据查寻出来后返回的是一个&lt;/span&gt;&lt;span class="n"&gt;IDataReader&lt;/span&gt;&lt;span class="err"&gt;的接口，&lt;/span&gt;&lt;span class="n"&gt;ExecuteSingle&lt;/span&gt;&lt;span class="err"&gt;中还有另外一个叫做&lt;/span&gt;&lt;span class="n"&gt;BuildTypedResult&lt;/span&gt;&lt;span class="err"&gt;的方法，在代码中找到方法的代码，然后设了断点，然后。。。我知道悲剧为什么发生了。。。。&lt;/span&gt;

&lt;span class="err"&gt;先上代码吧。&lt;/span&gt;

&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
 &lt;span class="n"&gt;PropertyInfo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;cachedProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PropertyInfo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rdr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FieldCount&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;rdr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FieldCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;cachedProps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rdr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Public&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instance&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IgnoreCase&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;rdr是返回的IDataReader的对象，先根据字段数初始化一个PropertyInfo数组，然后后面一段，是根据DataReader中的Name来或获取属性。执行到这里的时候属性数组中有些属性竟然丢失了，我找到生成的对应的类的代码看了下，发现这其实是一个不起眼的误会。。。。&lt;/p&gt;
&lt;p&gt;在数据库的表和字段的命名中，有的人是喜欢加前缀的，而一般前缀加了之后后面的字段就跟在一个下划线后面，比如Sys_User标识系统模块中的用户表，这样是没问题，但是Subsonic中生成的代码默认情况下是将下划线移除了的，所以表名和字段名是SysUser这样，在类中的属性名子成了这样，但是如果Datareader中的名字是Sys_User时，获取属性获取不到就是很自然的事情了。。。&lt;/p&gt;
&lt;p&gt;发现问题所在我在Subsonic的代码生成器中看了下，发现生成器Substage中Global下有个removeunderscore这个选项，默认是true，改成False生成代码里就会保留下划线。。其实解决方法很简单，但是知道了这其中的原理对我来说或许更显宝贵。。。。&lt;/p&gt;</summary></entry><entry><title>算法学习之合并排序</title><link href="http://blog.michaelyin.info/2010/10/30/%e7%ae%97%e6%b3%95%e5%ad%a6%e4%b9%a0%e4%b9%8b%e5%90%88%e5%b9%b6%e6%8e%92%e5%ba%8f/" rel="alternate"></link><updated>2010-10-30T12:02:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-10-30:2010/10/30/%e7%ae%97%e6%b3%95%e5%ad%a6%e4%b9%a0%e4%b9%8b%e5%90%88%e5%b9%b6%e6%8e%92%e5%ba%8f/</id><summary type="html">&lt;p&gt;在我的前面的一篇Post中我讲了排序算法中很基本的&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2010/10/20/1856789.html"&gt;插入排序&lt;/a&gt;，插入排序实现的算法思想是增量方法，即排好子数组之后，加入一个新的元素，然后再进行一个排序操作，保证重新生成按序排列的数组。&lt;/p&gt;
&lt;p&gt;这篇Post我将简单的讲讲排序算法另外一种算法，合并算法，合并算法采用分治法的思路，即问题划分成n个规模较小而结构和原来问题相似的子问题，递归解决这些子问题，然后合并结果，最终得到原来问题的解。&lt;/p&gt;
&lt;p&gt;合并算法主要分为三个部分，第一个部分是分解，将运来的问题分解成两个包含n/2个元素的数组的排序的问题，然后分别递归调用函数解决这两个数组的排序问题，最后一步，就是将已经排好序的数组重新进行组合，使其成为按序排列的数组。&lt;/p&gt;
&lt;p&gt;这三步中代码量较多的就是合并的代码了，合并的问题其实我们也可以把它想象成把两堆已经按从小到大的顺序排好的扑克牌排成一堆扑克牌的问题，每次比较最上面的那个牌，小的就拿走放到输出堆中，重复这个比较过程直到某一堆牌为空，然后把另外一堆牌直接放到输出堆中这个比较过程就结束了，想清楚了了这个过程的话理解代码就不难了。&lt;/p&gt;
&lt;p&gt;下面我将合并的代码贴出来&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
 //将两个数组按照顺序重新进行排列
        public static void Merge(int[] rawArray, int firstIndex, int middleIndex, int lastIndex)
        {
            //把middle指向的元素划分到前面的一个数组去
              int firstArrayCount = middleIndex - firstIndex + 1;
            int secondArrayCount = lastIndex - middleIndex;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;firstArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;firstArrayCount&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;secondArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;secondArrayCount&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;//将原来数组的元素分别复制到两个分开的数组当中去&lt;/span&gt;
         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;firstArrayCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;firstArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rawArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;firstIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;secondArrayCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;secondArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rawArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;middleIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;firstArrayIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;secondArrayIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rawArrayIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;firstIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

       &lt;span class="c1"&gt;//开始进行合并&lt;/span&gt;
        &lt;span class="c1"&gt;//通过while条件判断是否有数组已经全部遍历完毕,如果已经有一个数组输出完毕那么会跳出while循环&lt;/span&gt;
          &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstArrayIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;firstArrayCount&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;secondArrayIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;secondArrayCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;firstArrayIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;secondArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;secondArrayIndex&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//将值赋给原来的数组对应的位置，完毕后index都加1&lt;/span&gt;
                &lt;span class="n"&gt;rawArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rawArrayIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;firstArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;firstArrayIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;rawArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rawArrayIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secondArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;secondArrayIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;//跳出while循环后，这时有一个数组已经全部输出完毕，由于另外一个数组一定是按大小排序的数组，所以将剩下的元素直接循环赋值到原来的数组中去&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstArrayIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;firstArrayCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;rawArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rawArrayIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;firstArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;firstArrayIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secondArrayIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;secondArrayCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;rawArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rawArrayIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secondArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;secondArrayCount&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;看懂了上面的合并，下面这个递归调用就没什么了，函数将数组进行拆分，然后递归调用函数进行子数组的排序，子数组排序完成后调用合并函数将数组进行合并&lt;/span&gt;

&lt;span class="err"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brush&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="na"&gt;-links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="na"&gt;-line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gutter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="na"&gt;-script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ruler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smart&lt;/span&gt;&lt;span class="na"&gt;-tabs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="na"&gt;-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toolbar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;rawArray&amp;quot;&amp;gt;需要排序的数组&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;firstIndex&amp;quot;&amp;gt;左边界&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;lastIndex&amp;quot;&amp;gt;右边界&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;static&lt;/span&gt; &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;MergeSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; rawArray, int firstIndex, int lastIndex)
        {
            if (firstIndex &lt;span class="nt"&gt;&amp;lt; lastIndex&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
            &lt;span class="err"&gt;{&lt;/span&gt;
                &lt;span class="err"&gt;int&lt;/span&gt; &lt;span class="na"&gt;middleIndex =&lt;/span&gt; &lt;span class="s"&gt;(firstIndex&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="err"&gt;lastIndex)&lt;/span&gt; &lt;span class="err"&gt;/&lt;/span&gt; &lt;span class="err"&gt;2;&lt;/span&gt;
                &lt;span class="err"&gt;//递归调用函数&lt;/span&gt;
                  &lt;span class="err"&gt;MergeSort(rawArray,&lt;/span&gt; &lt;span class="err"&gt;firstIndex,&lt;/span&gt; &lt;span class="err"&gt;middleIndex);&lt;/span&gt;
                &lt;span class="err"&gt;MergeSort(rawArray,&lt;/span&gt; &lt;span class="err"&gt;middleIndex&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="err"&gt;1,&lt;/span&gt; &lt;span class="err"&gt;lastIndex);&lt;/span&gt;
                &lt;span class="err"&gt;//合并&lt;/span&gt;
                  &lt;span class="err"&gt;Merge(rawArray,&lt;/span&gt; &lt;span class="err"&gt;firstIndex,&lt;/span&gt; &lt;span class="err"&gt;middleIndex,&lt;/span&gt; &lt;span class="err"&gt;lastIndex);&lt;/span&gt;
            &lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;合并排序体现的主要是一个将问题进行拆分解决的思路，通过递归调用函数来解决子问题，最后合并结果，从而得到原问题的解。&lt;/p&gt;
&lt;p&gt;题外话：身边很多人在学数据结构和算法的时候对算法的语言有着特殊的要求，个人觉得学习算法学习的是一种解决问题的思路，而不是具体的代码实现,this
is the point….&lt;/p&gt;</summary></entry><entry><title>BlogEngine中的Provider模式（下）</title><link href="http://blog.michaelyin.info/2010/10/23/blogengine%e4%b8%ad%e7%9a%84provider%e6%a8%a1%e5%bc%8f%ef%bc%88%e4%b8%8b%ef%bc%89/" rel="alternate"></link><updated>2010-10-23T13:18:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-10-23:2010/10/23/blogengine%e4%b8%ad%e7%9a%84provider%e6%a8%a1%e5%bc%8f%ef%bc%88%e4%b8%8b%ef%bc%89/</id><summary type="html">&lt;p&gt;前面一篇Post主要专注于读取Web.Config中的配置的过程，这一篇将从面向对象的角度来阐述Provider的实现细节。&lt;/p&gt;
&lt;p&gt;BlogEngine中其实很多处用到了Provider模式，而我希望就数据存储这部分把Provider给大家讲清楚，因为其他的地方和数据存储差不多，实现的方式大同小异。&lt;/p&gt;
&lt;p&gt;BlogEngine中的BlogProvider是一个继承自ProviderBase的抽象类，在ProviderBase基础上加入了整个系统所有需要的方法签名，这个地方需要注意的是它并没有提供方法的具体实现的代码。XmlBlogProvider和DbBlogProvider都继承了BlogProvider，并且提供了具体的关于XML和数据库的实现方法的具体的代码。好了，现在让我们回头看BlogService这个类，整个系统的数据操作时这样的，逻辑代码调用BlogService中相应的方法，然后BlogService调用LoadProviders读取配置（如果已经读取就不用再次读取），然后操作已经经过实例化的BlogProvider的实例。&lt;/p&gt;
&lt;p&gt;在这里笔者需要提醒的是抽象类其实是不能直接通过new关键字实例化的，通过不同的派生类的类型转换生成的抽象类虽然拥有一样名称的方法，但是具体的实现逻辑却并不是一样的，这其实就是一种面向抽象编程。这样做有什么好处呢？我们可以将针对不同数据存储方式的操作写到不同的继承自BlogProvider类的派生类中，然后在Web.Config中进行配置，程序中调用BlogProvider的方法进行逻辑方面的处理，而对于具体的数据存储的细节则不用关注太多。&lt;/p&gt;
&lt;p&gt;对于派生类转换成基类后方法的调用细节不是很清楚的朋友可以看看Anytao的这篇文章&lt;a href="http://www.cnblogs.com/anytao/archive/2007/09/10/must_net_15.html"&gt;继承本质论&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>BlogEngine中的Provider模式（上）</title><link href="http://blog.michaelyin.info/2010/10/23/blogengine%e4%b8%ad%e7%9a%84provider%e6%a8%a1%e5%bc%8f%ef%bc%88%e4%b8%8a%ef%bc%89/" rel="alternate"></link><updated>2010-10-23T12:27:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-10-23:2010/10/23/blogengine%e4%b8%ad%e7%9a%84provider%e6%a8%a1%e5%bc%8f%ef%bc%88%e4%b8%8a%ef%bc%89/</id><summary type="html">&lt;p&gt;BlogEngine中的数据存储部分使用了Provider模式来支持多种数据存储方式，比如Sql
server,XML等。只需要通过修改Web.Config文件中的响应配置节就可以按需求进行数据存储方式的改变。&lt;/p&gt;
&lt;p&gt;&amp;lt;configSections&gt; &lt;br /&gt;
&amp;lt;sectionGroup name="BlogEngine"&gt; &lt;br /&gt;
&amp;lt;section name="blogProvider" requirePermission="false"
type="BlogEngine.Core.Providers.BlogProviderSection, BlogEngine.Core"
allowDefinition="MachineToApplication"
restartOnExternalChanges="true"/&gt; &lt;br /&gt;
&amp;lt;/sectionGroup&gt; &lt;br /&gt;
&amp;lt;/configSections&gt;&lt;/p&gt;
&lt;p&gt;首先在Web.Config中定义BlogEngine这个自定义节点，sectionGroup这个是存放section元素的容器，它不是必须要写的。section则是将配置节中的配置信息和配置处理程序提供关联。这里我们可以看到，它将blogProvider这个配置节和BlogProviderSection这个类提供了关联,name
= “blogProvider”说明配置节为blogProvider&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
  public class BlogProviderSection : ConfigurationSection
  {&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// A collection of registered providers.&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ConfigurationProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;providers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
public ProviderSettingsCollection Providers
{
  get { return (ProviderSettingsCollection)base&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;providers&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;; }
}

/// &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
/// The name of the default provider
/// &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;StringValidator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MinLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ConfigurationProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;defaultProvider&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DefaultValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;XmlBlogProvider&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
public string DefaultProvider
{
  get { return (string)base&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;defaultProvider&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;; }
  set { base&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;defaultProvider&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; = value; }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;上面是&lt;/span&gt;&lt;span class="nx"&gt;BlogProviderSection&lt;/span&gt; &lt;span class="err"&gt;的代码，用&lt;/span&gt;&lt;span class="nx"&gt;ConfigurationProperty&lt;/span&gt;
&lt;span class="nx"&gt;Attribute&lt;/span&gt;&lt;span class="err"&gt;标注的属性，系统在运行时从&lt;/span&gt;&lt;span class="nx"&gt;Web.Config&lt;/span&gt;&lt;span class="err"&gt;中反序列化来实例化当前类。还需要注意的一个类是&lt;/span&gt;&lt;span class="nx"&gt;ProviderSettingsCollection&lt;/span&gt;

&lt;span class="err"&gt;在&lt;/span&gt;&lt;span class="nx"&gt;configSections&lt;/span&gt;&lt;span class="err"&gt;下面定义好了之后，就可以在&lt;/span&gt;&lt;span class="nx"&gt;Web.Config&lt;/span&gt;&lt;span class="err"&gt;中用&lt;/span&gt;&lt;span class="nx"&gt;BlogEngine&lt;/span&gt;&lt;span class="err"&gt;这个自定义节点来配置一些数据了&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BlogEngine&lt;/span&gt;&lt;span class="o"&gt;\&amp;gt;&lt;/span&gt;  

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;blogProvider&lt;/span&gt; &lt;span class="n"&gt;defaultProvider&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DbBlogProvider&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;\&amp;gt;&lt;/span&gt;  

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;providers&lt;/span&gt;&lt;span class="o"&gt;\&amp;gt;&lt;/span&gt;  

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;add&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;XmlBlogProvider&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;BlogEngine.Core.Providers.XmlBlogProvider, BlogEngine.Core&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/\&amp;gt;&lt;/span&gt;  

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;add&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DbBlogProvider&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;BlogEngine.Core.Providers.DbBlogProvider, BlogEngine.Core&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;connectionStringName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;BlogEngine&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/\&amp;gt;&lt;/span&gt;  

&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;providers&lt;/span&gt;&lt;span class="o"&gt;\&amp;gt;&lt;/span&gt;  

&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;blogProvider&lt;/span&gt;&lt;span class="o"&gt;\&amp;gt;&lt;/span&gt;  

&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;BlogEngine&lt;/span&gt;&lt;span class="o"&gt;\&amp;gt;&lt;/span&gt;

&lt;span class="err"&gt;需要的配置信息都已经在&lt;/span&gt;&lt;span class="nx"&gt;Web.Config&lt;/span&gt;&lt;span class="err"&gt;里面写好了，系统在运行的时候需要从&lt;/span&gt;&lt;span class="nx"&gt;Web.Config&lt;/span&gt;&lt;span class="err"&gt;文件中动态读取配置信息，下面给出读取配置信息的代码&lt;/span&gt;

&lt;span class="err"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brush&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="na"&gt;-links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="na"&gt;-line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gutter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="na"&gt;-script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ruler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smart&lt;/span&gt;&lt;span class="na"&gt;-tabs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="na"&gt;-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toolbar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
      &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;static&lt;/span&gt; &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;LoadProviders&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Avoid claiming lock if providers are already loaded&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_provider&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;lock&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// Do this again to make sure _provider is still null&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_provider&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// Get a reference to the &amp;lt;blogProvider&amp;gt; section&lt;/span&gt;
                        &lt;span class="nx"&gt;BlogProviderSection&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BlogProviderSection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;WebConfigurationManager.GetSection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;BlogEngine/blogProvider&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                        &lt;span class="c1"&gt;// Load registered providers and point _provider&lt;/span&gt;
                        &lt;span class="c1"&gt;// to the default provider&lt;/span&gt;
                        &lt;span class="n"&gt;_providers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BlogProviderCollection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                        &lt;span class="nx"&gt;ProvidersHelper.InstantiateProviders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;section.Providers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_providers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BlogProvider&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                        &lt;span class="n"&gt;_provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_providers&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;section.DefaultProvider&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;

                        if (_provider == null)
                            throw new ProviderException(&amp;quot;Unable to load default BlogProvider&amp;quot;);
                    }
                }
            }
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;_provider为静态变量，多线程下先Double
Check确保线程安全，然后用GetSection方法获取BlogProviderSection
的一个实例对象，然后ProvidersHelper.InstantiateProviders将ProviderSettingsCollection
类型的section.Providers初始化为一个BlogProvider集合类，最后从集合类中取出当前系统使用的provider.这样从配置文件中读取provider配置信息的过程基本就到此结束了&lt;/p&gt;
&lt;p&gt;关于自定义配置园子里有相关文章，在这里给几个链接，我自己也从中收获颇丰，再次表示感谢。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/huc87/archive/2009/05/06/1450981.html"&gt;Web.config自定义节点configSections&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/guozhijian/archive/2008/01/31/1060377.html"&gt;通过继承ConfigurationSection，在web.config中增加自定义配置&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Random 学习笔记</title><link href="http://blog.michaelyin.info/2010/10/20/random-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/" rel="alternate"></link><updated>2010-10-20T12:44:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-10-20:2010/10/20/random-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/</id><summary type="html">&lt;p&gt;这几天在学习算法，所以生成随机数组就不可避免了，以前只是知道Random
这个类是用来生成随机数的但是没怎么用过，这次正好趁这个机会好好了解一下，在园子里面看了下别人写的文章和代码，自己又在VS里面跑了几次，这里就把一些觉得useful的东东记下来。&lt;/p&gt;
&lt;p&gt;Random是用来生成伪随机数的类，它根据生成对象时候的随机种子进行复杂的计算，然后生成伪随机数。如果我们在调用构造函数的时候没有指定随机种子，那么默认情况下它会采用系统的时间产生的值来做随机种子，这样的话那么我们在一次函数调用里面不同的Random对象有可能是采用相同的随机种子，那么有可能造成生成重复的随机数。关于随机种子的选取问题，等下会专门讲解。Random里面要用到比较多的方法就是obj.Next()这个方法，用于根据随机种子按照复杂的算法生成伪随机数，这个方法有多个重载的方法，可以限定需要生成的数字的最大值和最小值，基本上Random经常使用的就是这么几个东西。&lt;/p&gt;
&lt;p&gt;下面来讲一下如何避免生成重复的随机种子，以此来避免产生一连串重复的随机数。其实关键点就在于生成随机数的随机种子必须不一样，一种方法就是采用Guid.NewGuid().GetHashCode()来当做随机种子，由于Guid重复的可能性非常小，而且Hash算法不同的输入产生的结果也是不同的，所以可以很好的解决随机种子相同的问题。还有一种方法就是采用&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
long tick = DateTime.Now.Ticks; 
Random ran = new Random((int)(tick &amp;amp; 0xffffffffL) | (int) (tick &amp;gt;&amp;gt; 32)); &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;这个方法来达到效果&lt;/span&gt;

&lt;span class="err"&gt;园子里面有的朋友是用算法来完成生成不重复随机数的，这样可以完全避免重复数据的发生。&lt;/span&gt;

&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;CreateInstanceType2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;Random&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;//循环变量-1,下一次for循环继续针对这个变量值进行&lt;/span&gt;
                    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个算法执行的思想就是每次生成后面的结果的时候都和前面所生成的结果进行比较，如果有比较的则把for循环中的i减小一次，下一次循环的时候重新生成，这是一种思路&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}&lt;/p&gt;
&lt;p _="=" i_="i;
" index_i_="index[i]"&gt;int[] index = new int[15];
        for (int i = 0; i &amp;lt; 15; i++)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;Random&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//用来保存随机生成的不重复的10个数&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//设置下限&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//在随机位置取出一个数，保存到结果数组&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="c1"&gt;//最后一个数复制到当前位置&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="c1"&gt;//位置的下限减少一&lt;/span&gt;
        &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~&lt;/p&gt;
&lt;p&gt;另外一种思想是首先在另外一个数组中把需要生成的结果生成，然后通过生成随机位置来确保唯一不重复随机数组。&lt;/p&gt;
&lt;p&gt;上面提到的几种方式应该根据实际情况具体确定使用方法，一般情况下在项目中如果需要用到Random的话把它设为全局的然后直接拿来调用是种不错的使用方式。&lt;/p&gt;</summary></entry><entry><title>算法学习之插入排序</title><link href="http://blog.michaelyin.info/2010/10/20/%e7%ae%97%e6%b3%95%e5%ad%a6%e4%b9%a0%e4%b9%8b%e6%8f%92%e5%85%a5%e6%8e%92%e5%ba%8f/" rel="alternate"></link><updated>2010-10-20T08:02:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-10-20:2010/10/20/%e7%ae%97%e6%b3%95%e5%ad%a6%e4%b9%a0%e4%b9%8b%e6%8f%92%e5%85%a5%e6%8e%92%e5%ba%8f/</id><summary type="html">&lt;p&gt;最近开始学习算法方面的东西，用的资料是算法导论，在这里也顺便把学习过程中的心得，体会等，在这里做个总结，并给出自己用c#实现的代码。&lt;/p&gt;
&lt;p&gt;说个简单点的例子，就拿算法导论一书中的Poker的例子来说吧。刚开始我们的手上有一张牌，而这张牌肯定是没有排序的大小顺序问题的，桌子上放的牌就是剩下的都没有排序的那些牌，我们将牌从桌子上拿起来，然后从右往左边看，看到一个比我们刚摸上来的牌小的牌后，把手上这个牌右边的牌都朝右边挪动一个位子，然后把刚摸起来的这张牌插入到空出来的这个位置中去。&lt;/p&gt;
&lt;p&gt;下面给出实现的代码&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .0; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
       /// &lt;summary&gt;
       /// 插入排序
        /// &lt;/summary&gt;
        /// &lt;param name="arrayToSort"&gt;需要排序的数组&lt;/param&gt;
        public static void InsertionSort(int[] arrayToSort)
        {
            //从第二个元素开始
            for (int j = 1; j &amp;lt; arrayToSort.Length; j++)
            {
                int key = arrayToSort[j];
                int i = j - 1;
                //注意防止索引越界
                while (i &amp;gt; -1 &amp;amp;&amp;amp; arrayToSort[i] &amp;gt; key)
                {
                    arrayToSort[i + 1] = arrayToSort[i];
                    i--;
                }
                arrayToSort[i + 1] = key;
            }
        }
~~~~&lt;/p&gt;
&lt;p&gt;本篇讲的是插入排序，插入排序的作用就是将一个本来没有顺序的数组经过处理使其内部元素按照大小顺序统一排列，它的设计思想是采用的增量(incremental)方法，通过循环每次新增一个元素到子数组中，每次将新增这个元素插入到子数组中合适的位置，形成排好序的子数组，这样不停的循环知道数组中的元素全部排序完毕。&lt;/p&gt;
&lt;p&gt;算法分析：插入排序的的最坏情况发上在逆序数组的时候，这个时候时间是一个关于n的二次函数。&lt;/p&gt;</summary></entry><entry><title>母版页中的js和css文件引用路径的问题</title><link href="http://blog.michaelyin.info/2010/10/08/%e6%af%8d%e7%89%88%e9%a1%b5%e4%b8%ad%e7%9a%84js%e5%92%8ccss%e6%96%87%e4%bb%b6%e5%bc%95%e7%94%a8%e8%b7%af%e5%be%84%e7%9a%84%e9%97%ae%e9%a2%98/" rel="alternate"></link><updated>2010-10-08T02:46:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-10-08:2010/10/08/%e6%af%8d%e7%89%88%e9%a1%b5%e4%b8%ad%e7%9a%84js%e5%92%8ccss%e6%96%87%e4%bb%b6%e5%bc%95%e7%94%a8%e8%b7%af%e5%be%84%e7%9a%84%e9%97%ae%e9%a2%98/</id><summary type="html">&lt;p&gt;今天在做项目的时候发现了母版页中引用css文件和js文件路径在内容页中发生路径错误。&lt;/p&gt;
&lt;p&gt;先来说说问题发生的情况吧，比如我在一个母版页中引用了一个js文件和一个css样式表文件，路径是使用的相对路径，代码是这样子的&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
&lt;link href="../css/dtree.css" rel="stylesheet" type="text/css" /&gt;&lt;/p&gt;
&lt;script src="../js/dtree.js" type="text/javascript"&gt;&lt;/script&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="err"&gt;母版页我放在项目文件&lt;/span&gt;&lt;span class="n"&gt;MasterPage&lt;/span&gt;&lt;span class="err"&gt;文件夹中，脚本文件和&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="err"&gt;文件我分别放在相应的文件夹中，在&lt;/span&gt;&lt;span class="n"&gt;Design&lt;/span&gt;&lt;span class="err"&gt;模式中这也是可见的，然后我加入内容页，内容页假设我放在网站根目录下面，然后放入内容，进入后台进行编程，基本上完成以后想看看效果，就&lt;/span&gt;&lt;span class="n"&gt;F5&lt;/span&gt;&lt;span class="err"&gt;进行了调试，不过缺发现&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="err"&gt;没有起作用，在&lt;/span&gt;&lt;span class="n"&gt;IE&lt;/span&gt;&lt;span class="err"&gt;下查看源文件，发现引用处的&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="err"&gt;和&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="err"&gt;的路径发生了变化，如下所示&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
&lt;link href="css/dtree.css" rel="stylesheet" type="text/css" /&gt;&lt;/p&gt;
&lt;script src="../js/dtree.js" type="text/javascript"&gt;&lt;/script&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="err"&gt;从这里可以看到，内容页中的引用的&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="err"&gt;文件的路径在页面加载运行后发生了变化，而&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="err"&gt;的路径没有相应的发生变化。这样就造成了内容页中并不能正确的引用到&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="err"&gt;文件的路径，从而造成了错误。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
其实这样的问题并不仅仅限于js,比如页面中的HTML基本元素，在内容页加载的时候也会因为相对路径的路径问题而产生这样那样的问题。到这里可以查看稍微详细一点的信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="err"&gt;对于这种问题，比较好的解决方案就是写成这样的形式&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
&lt;script src='&lt;%=ResolveUrl("~/js/jquery.js") %&gt;' type="text/javascript"&amp;gt;&lt;/script&gt;
~~~~&lt;/p&gt;
&lt;p&gt;ResolveUrl方法会把服务器端的地址进行解析，转换之后的地址是诸如/Project/Folder/File.jpg
这样的绝对路径，转换之后就不用担心母版页带来的路径问题了。&lt;/p&gt;</summary></entry><entry><title>权限设计学习总结</title><link href="http://blog.michaelyin.info/2010/10/05/%e6%9d%83%e9%99%90%e8%ae%be%e8%ae%a1%e5%ad%a6%e4%b9%a0%e6%80%bb%e7%bb%93/" rel="alternate"></link><updated>2010-10-05T15:22:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-10-05:2010/10/05/%e6%9d%83%e9%99%90%e8%ae%be%e8%ae%a1%e5%ad%a6%e4%b9%a0%e6%80%bb%e7%bb%93/</id><summary type="html">&lt;p&gt;看着师兄师姐忙着笔试，找工作，不知不觉已经过去一年了。。明年就轮到自己了。。。加油。。。&lt;/p&gt;
&lt;p&gt;以前对权限两字的理解一直不是很清楚，甚至可以说是错误，连用户登录我一直都都以为是属于权限管理里面的，前几天看了园子里面的两篇文章，顺便又乘机查了下相关的资料，感觉对于权限这两个字又有了全新的认识。&lt;/p&gt;
&lt;p&gt;先来百度百科里面对权限管理的解释：权限管理，一般指根据系统设置的安全规则或者安全策略，用户&lt;strong&gt;可以访问而且只能访问&lt;/strong&gt;自己被授权的资源，不多不少。权限管理几乎出现在任何系统里面，只要有用户和密码的系统。PS用户登陆属于用户身份认证，本质上并不属于权限管理，不应该将盖帘混淆。&lt;/p&gt;
&lt;p&gt;其实说简单点，权限管理也就是让有权限的用户得到授权的资源，这个资源可以是具体的数据，也可以是某种抽象的功能。它的本质就是这个。如何判断用户是否有权限并将没有权限的用户阻止掉访问资源，这个就是权限的管控，比如Asp.Net中可以通过Page_Load,HttpModule等等进行管控，实现的方式是多种多样的，但是实现的本质其实并没有多大的差别。&lt;/p&gt;
&lt;p&gt;管控的大致步骤就是首先得到用户，然后得到资源，对资源和用户进行匹配，如果不匹配则进行阻止的操作，比如跳向提示页面，或者隐藏相应的控件。&lt;/p&gt;
&lt;p&gt;项目中经常使用的权限判定方法就是将需要进行权限管理页面继承自一个实现了管控方法的页面基类BasePage,判定方法写在页面初始化的事件中，然后根据复写的属性值来进行判定，实现管控。&lt;/p&gt;
&lt;p&gt;提到权限设计，有个名词在这里也就有必要交代一下。RBAC,基于角色的访问控制（Role-Based
Access
Control），虽然权限管理如果做极端点的话其实一个用户ID和一个资源对应ID的对应表就足够，但是如果设计到用户权限的变更的话或者其他的权限管理操作的话，那么单纯的用户ID和资源ID对应的表结构就不是很好了。而RBAC则在用户ID和资源ID中添加了一个角色，通过将用户ID添加进角色与否和对角色，资源ID的分配来提供了更灵活的模型结构。&lt;/p&gt;
&lt;p&gt;一般来说，RBAC在数据库中比较多的做法是用五张数据表，用户表，角色表，权限表，然后是两张连接表，这也基本可以认为是一种比较经典的结构吧。当然了，对于特定的系统来说，有些表也是不一定都需要的，比如权限表有的时候并不一定是会分离的。&lt;/p&gt;
&lt;p&gt;理论知识懂了许多，以后做项目希望能更清晰的来对待这部分。&lt;/p&gt;
&lt;p&gt;下面是我学习中搜集的一些有用的资源，现把地址贴出来&lt;/p&gt;
&lt;p&gt;&lt;a href="http://baike.baidu.com/view/2108713.htm"&gt;权限管理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/tsoukw/archive/2010/09/27/1836485.html"&gt;闲话权限设计三层境界&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://baike.baidu.com/view/73432.htm"&gt;RBAC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.javaeye.com/topic/360021"&gt;对权限管理认识的一些误区&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>泛型约束学习总结</title><link href="http://blog.michaelyin.info/2010/09/29/%e6%b3%9b%e5%9e%8b%e7%ba%a6%e6%9d%9f%e5%ad%a6%e4%b9%a0%e6%80%bb%e7%bb%93/" rel="alternate"></link><updated>2010-09-29T09:18:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-09-29:2010/09/29/%e6%b3%9b%e5%9e%8b%e7%ba%a6%e6%9d%9f%e5%ad%a6%e4%b9%a0%e6%80%bb%e7%bb%93/</id><summary type="html">&lt;p&gt;最近在学习代码的时候发现对泛型约束不是很了解，花时间在网上学习了下，现在在这里做个总结吧。&lt;/p&gt;
&lt;p&gt;泛型约束主要就是用于在泛型类中对于泛型类所接受的参数的某些特性进行设置。先来说说为什么要使用泛型约束吧。打个比方，一个泛型基类中的某个方法的实现需要调用参数类型生成的实例的Compare方法，但是参数类型不是我们所能够控制的，我们需要在程序编译的时候加入对参数类型的检查，这个时候就要用到泛型约束了。&lt;/p&gt;
&lt;p&gt;泛型约束基本上有五种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;值类型约束：要求泛型参数必须是值类型，例如int,short以及自定义的stuct等&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;public class MyClass2&amp;lt;T&gt; &lt;br /&gt;
 where T : struct//这个泛型类只接受值类型的泛型参数 &lt;br /&gt;
 { &lt;br /&gt;
 }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;引用类型约束：要求泛型参数必须是引用类型，例如string,object,以及自定义的class&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;public class MyClass&amp;lt;T&gt; &lt;br /&gt;
 where T:class//这个泛型类只接受引用类型的泛型参数 &lt;br /&gt;
 { &lt;br /&gt;
 }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;构造函数约束：要求泛型参数必须有构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;public class MyClass3&amp;lt;T&gt; &lt;br /&gt;
 where T : new() &lt;br /&gt;
 { &lt;br /&gt;
 }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;接口约束：要求泛型参数必须实现某个接口&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;public class MyClass4&amp;lt;T&gt; &lt;br /&gt;
 where T : System.IComparable &lt;br /&gt;
 { &lt;br /&gt;
 }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基类约束：要求泛型参数必须继承某个基类&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;public class MyClass5&amp;lt;T&gt; &lt;br /&gt;
 where T : Customer &lt;br /&gt;
 { &lt;br /&gt;
 }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;BlogEngine中的BusinessBase泛型基类就使用到了泛型基类，下面我贴上代码&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
public abstract class BusinessBase&lt;TYPE, KEY&gt; : IDataErrorInfo, INotifyPropertyChanged, IChangeTracking, IDisposable where TYPE : BusinessBase&lt;TYPE, KEY&gt;, new()
~~~~&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/wdxinren/archive/2005/05/29/164392.html"&gt;一个用代码讲解泛型约束的例子&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Bugnet学习总结（3）项目文件结构</title><link href="http://blog.michaelyin.info/2010/07/19/bugnet%e5%ad%a6%e4%b9%a0%e6%80%bb%e7%bb%93%ef%bc%883%ef%bc%89%e9%a1%b9%e7%9b%ae%e6%96%87%e4%bb%b6%e7%bb%93%e6%9e%84/" rel="alternate"></link><updated>2010-07-19T11:07:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-07-19:2010/07/19/bugnet%e5%ad%a6%e4%b9%a0%e6%80%bb%e7%bb%93%ef%bc%883%ef%bc%89%e9%a1%b9%e7%9b%ae%e6%96%87%e4%bb%b6%e7%bb%93%e6%9e%84/</id><summary type="html">&lt;p&gt;用VS打开Bugnet项目文件，可以看到四个Project,BugNET_WAP是Web项目，HttpModule.Authentication是自定义的认证模块，好像是可以在其中选择WindowsSAM和ActiveDirectory两种认证方式，这个模块我没怎么看，感兴趣的朋友请自己研究下，HttpModule.MailBoxReader是邮件读取的模块，UnitTests是单元测试Project.&lt;/p&gt;
&lt;p&gt;另外的三个文件结构相对比较简单，就不在这里多做说明了，现在在这里主要对BugNET_WAP进行较详细的说明。&lt;/p&gt;
&lt;p&gt;Bugnet使用的数据库是Sql
server2005,如果你下载的是source代码，你是不需要Install过程的，建议使用Sql
server将它附加到你本机数据库中（数据库在APP_Data文件夹中），然后将Web.config中的链接字符串修改成连接你本机数据库就OK。关于Bugnet安装版的安装过程，园子里面已经有人发了，大家自己去找找。&lt;/p&gt;
&lt;p&gt;Administration文件夹里面主要是项目管理相关的页面和用户控件，关于Project创建和管理的页面都在这里面。&lt;/p&gt;
&lt;p&gt;Bugs则主要是提交Issue和管理Issue的页面和用户控件。&lt;/p&gt;
&lt;p&gt;Config文件夹中的Log4Net.config是log4net的配置文件。&lt;/p&gt;
&lt;p&gt;Errors文件夹放的是显示错误的页面。&lt;/p&gt;
&lt;p&gt;Install放的是Bugnet安装和升级需要的文件，如果下载的是发布版本的Bugnet，第一次需要运行Install.aspx来进行安装。&lt;/p&gt;
&lt;p&gt;Report放的是报表文件和浏览报表的页面。&lt;/p&gt;
&lt;p&gt;Shared放的是所用到的母版页。&lt;/p&gt;
&lt;p&gt;UserControls放的是用户控件，需要提到的xslt文件，FCKeditor。&lt;/p&gt;
&lt;p&gt;Old_App_Code中放的是需要用到的App_Code,UIL中放的是BugNET.UserInterfaceLayer下的类，Pop3Reader下放的是读取邮件时需要用到的类，DAL和BLL是干什么的就不用我多说了吧。。&lt;/p&gt;</summary></entry><entry><title>Bugnet学习总结（2）数据库</title><link href="http://blog.michaelyin.info/2010/07/19/bugnet%e5%ad%a6%e4%b9%a0%e6%80%bb%e7%bb%93%ef%bc%882%ef%bc%89%e6%95%b0%e6%8d%ae%e5%ba%93/" rel="alternate"></link><updated>2010-07-19T07:50:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-07-19:2010/07/19/bugnet%e5%ad%a6%e4%b9%a0%e6%80%bb%e7%bb%93%ef%bc%882%ef%bc%89%e6%95%b0%e6%8d%ae%e5%ba%93/</id><summary type="html">&lt;p&gt;由于Bugnet使用了Membership,所以数据库中会有aspnet_Applications这样以aspnet开头的表名，而这其中和user相关的权限的表诸如aspnet_UsersInRoles，aspnet_Roles，这些表在实际项目运行中是没有用到的，关于membership中的表的联系以及表的具体含义，请参考这篇文章。&lt;a href="http://www.cnblogs.com/hjf1223/archive/2006/08/27/487890.html"&gt;请猛击这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnblogs.com/cnblogs_com/MichaelYin/WindowsLiveWriter/Bugnet2_1170F/%E6%9C%AA%E5%91%BD%E5%90%8D.jpg"&gt;&lt;img alt="未命名" src="http://images.cnblogs.com/cnblogs_com/MichaelYin/WindowsLiveWriter/Bugnet2_1170F/%E6%9C%AA%E5%91%BD%E5%90%8D_thumb.jpg" title="未命名" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接下来的就是具体的业务表了，在业务表中，比较重要的就是Project，Bug这两张表。&lt;/p&gt;
&lt;p&gt;aspnet_Users和UserRoles，Roles，RolePermission,Permission,UserProjects组成了基于Project的权限管理模块所需要的表，表名所对应的意思看起来是一目了然的，在这里也就不多说了。。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnblogs.com/cnblogs_com/MichaelYin/WindowsLiveWriter/Bugnet2_1170F/%E6%9C%AA%E5%91%BD%E5%90%8D_1.jpg"&gt;&lt;img alt="未命名" src="http://images.cnblogs.com/cnblogs_com/MichaelYin/WindowsLiveWriter/Bugnet2_1170F/%E6%9C%AA%E5%91%BD%E5%90%8D_thumb_1.jpg" title="未命名" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在Bugnet里你创建一个Project的话，项目创建者可以在里面事先添加一些你自定义的属性，你可以决定项目成员在提交内容的时候是否必须填写这个自定义属性，这个自定义属性值你可以设定成Text,Dropdownlist,等等，关于这个功能，具体是在ProjectCustomFields，ProjectCustomFieldSelection，ProjectCustomFieldType，ProjectCustomFieldValues这几个表中实现的。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnblogs.com/cnblogs_com/MichaelYin/WindowsLiveWriter/Bugnet2_1170F/QQ%E6%88%AA%E5%9B%BE%E6%9C%AA%E5%91%BD%E5%90%8D_2.jpg"&gt;&lt;img alt="QQ截图未命名" src="http://images.cnblogs.com/cnblogs_com/MichaelYin/WindowsLiveWriter/Bugnet2_1170F/QQ%E6%88%AA%E5%9B%BE%E6%9C%AA%E5%91%BD%E5%90%8D_thumb.jpg" title="QQ截图未命名" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;剩下的表基本上都是以Bug为中心，BugAttachment保存上传的附件，BugComment保存评论，BugHistory保存Issue的历史，BugNotification保存Issue相关的需要通知的User,Component保存Project的分类，RelatedBug保存相关Issue关系。另外的几个表都是比如Status，Type都是起着字典表的作用。标识着Issue的状态和类别。&lt;/p&gt;
&lt;p&gt;HostSettings保存着Bugnet整体相关的设置。Log则是Log4net进行日志记录的地方。&lt;/p&gt;
&lt;p&gt;表基本上介绍完了，Bugnet在数据操作上基本是使用Ado调用存储过程来完成数据操作的，在这一点上我也是有点不理解，如果说使用存储过程是为了性能，那它代码可以优化的地方不是没有，比如它使用的是自带的分页，而没有自己写分页，这样在数据量达到一定程度时性能肯定会首影响，而且更让我感到有点疑惑的是，代码里面使用了Datafaactory来生成需要的对象，那你为什么具体的数据操作代码要放到数据库里面去？不是要分离么？&lt;/p&gt;
&lt;p&gt;视图的话只有BugsView一个，就是将Bug表有联系的表连接起来方便查询。。&lt;/p&gt;
&lt;p&gt;数据库大致感觉要说的就这些。。:)&lt;/p&gt;</summary></entry><entry><title>Bugnet学习总结（1） 前言&amp;索引</title><link href="http://blog.michaelyin.info/2010/07/18/bugnet%e5%ad%a6%e4%b9%a0%e6%80%bb%e7%bb%93%ef%bc%881%ef%bc%89-%e5%89%8d%e8%a8%80%e7%b4%a2%e5%bc%95/" rel="alternate"></link><updated>2010-07-18T11:29:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-07-18:2010/07/18/bugnet%e5%ad%a6%e4%b9%a0%e6%80%bb%e7%bb%93%ef%bc%881%ef%bc%89-%e5%89%8d%e8%a8%80%e7%b4%a2%e5%bc%95/</id><summary type="html">&lt;p&gt;Bugnet是一个简单的Bug管理系统，这个系统对于.Net语言有一定了解而想继续深入学习的朋友来说还是不错的，系统不大，实现的功能叶相对比简单，不会像某些NB源代码会让你在学习的过程中纠结不已。其中的一些控件使用的方法在某些情况下对于我们来说还是值得借鉴的，比如其中的Ajax的实现是使用了ajaxcontroltoolkit，方法比较简单，而效果还不错。&lt;/p&gt;
&lt;p&gt;Bugnet系统中用到的若干的我觉得有必要提及的技术我先在这里先提一下，接下来的几篇Blog会按模块进行展开，有可能会有一些遗漏的地方，欢迎大家留言补充。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Membership及其相关认证控件&lt;/li&gt;
&lt;li&gt;DataFactory&lt;/li&gt;
&lt;li&gt;Log4net记录日志&lt;/li&gt;
&lt;li&gt;用户控件的使用&lt;/li&gt;
&lt;li&gt;Rss输出&lt;/li&gt;
&lt;li&gt;nunit单元测试&lt;/li&gt;
&lt;li&gt;邮件的读取和发送&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了使用的技术外，Bugnet在层次架构方面的一些东西也是值得借鉴的，我以后会慢慢陈述，当然了，有些地方的处理我和项目人员所想也有所偏差，也希望大家多多讨论。。。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2010/07/19/1780749.html"&gt;Bugnet学习总结（2）数据库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2010/07/19/1780870.html"&gt;Bugnet学习总结（3）项目文件结构&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2010/07/25/1784803.html"&gt;Bugnet学习总结（4）数据访问层&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2010/07/25/1784819.html"&gt;Bugnet学习总结（5）逻辑层&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2010/08/01/1789842.html"&gt;Bugnet学习总结（6）用户控件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/MichaelYin/archive/2010/08/08/1795158.html"&gt;Bugnet学习总结（7）杂&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>有列表List的操作所学习到的</title><link href="http://blog.michaelyin.info/2010/07/14/%e6%9c%89%e5%88%97%e8%a1%a8list%e7%9a%84%e6%93%8d%e4%bd%9c%e6%89%80%e5%ad%a6%e4%b9%a0%e5%88%b0%e7%9a%84/" rel="alternate"></link><updated>2010-07-14T05:09:00+08:00</updated><author><name>MichaelYin</name></author><id>tag:blog.michaelyin.info,2010-07-14:2010/07/14/%e6%9c%89%e5%88%97%e8%a1%a8list%e7%9a%84%e6%93%8d%e4%bd%9c%e6%89%80%e5%ad%a6%e4%b9%a0%e5%88%b0%e7%9a%84/</id><summary type="html">&lt;p&gt;前几日coding的时候，需要实现在泛型列表中找到其中的一个对象并将其移除的功能，刚开始想的很简单，先上代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AttachmentBox&lt;/span&gt; &lt;span class="n"&gt;objAttachmentBox&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lsAttachments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objAttachmentBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AttachmentId&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CommandArgument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;lsAttachments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objAttachmentBox&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是我刚开始写的代码。。&lt;/p&gt;
&lt;p&gt;运行时候VS提示错误
“集合已修改；可能无法执行枚举操作。”跑到博客园里面找了一番，发现使用foreach就会存在这个问题，因为foreach在遍历的时候只取只读的数据，如果用for的话，就能够比避免这个问题。&lt;/p&gt;
&lt;p&gt;好吧，那就换成for循环吧。&lt;/p&gt;
&lt;p&gt;for (int i = 0; i &amp;lt;= lsAttachments.Count(); i++)
{
    if (lsAttachments[i].AttachmentId == int.Parse(e.CommandArgument.ToString()))
    {
       lsAttachments.RemoveAt(i);
    }
}&lt;/p&gt;
&lt;p&gt;运行程序显示成功，不过不小心瞄到了List的RemoveAll的方法,饿。。是虾米意思呢？打开vs帮助查了一下，原来是使用委托找到相应的对象，并移除&lt;/p&gt;
&lt;p&gt;MSDN里面的代码是这样写的。。。。&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
 private static bool EndsWithSaurus(String s)
    {
        if ((s.Length &amp;gt; 5) &amp;amp;&amp;amp; 
            (s.Substring(s.Length - 6).ToLower() == "saurus"))
        {
            return true;
        }
        else
        {
            return false;
        }
    }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;在单独的函数里面实现逻辑的话我的&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CommandArgument&lt;/span&gt;&lt;span class="err"&gt;可不方便，感觉有点丑陋。。。等下等下，不是有匿名委托么？&lt;/span&gt;

&lt;span class="err"&gt;这是第三个版本&lt;/span&gt;

&lt;span class="o"&gt;~~~~&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;brush&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csharp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gutter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ruler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
 &lt;span class="n"&gt;lsAttachments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RemoveAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AttachmentBox&lt;/span&gt; &lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AttachmentId&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CommandArgument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一行代码搞定，很优雅吧。。。不过呢。。。Lamda表达式会让它更有气质。。。&lt;/p&gt;
&lt;p&gt;~~~~ {.brush: .csharp; .auto-links: .true; .collapse: .false;
.first-line: .1; .gutter: .true; .html-script: .false; .light: .false;
.ruler: .false; .smart-tabs: .true; .tab-size: .4; .toolbar: .true;}
lsAttachments.RemoveAll( c =&amp;gt;  c.AttachmentId == int.Parse(e.CommandArgument.ToString()));
~~~~&lt;/p&gt;</summary></entry></feed>